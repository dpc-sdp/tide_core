<?php

/**
 * @file
 * Tide Grant module install file..
 */

use Drupal\tide_grant\TideGrantOperation;

/**
 * Implements hook_install().
 */
function tide_grant_install() {
  // Don't do anything else during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }
  $grantoperation = new TideGrantOperation();
  $grantoperation->addGrantAuthorUser();
  $grantoperation->assignNecessaryPermissions();
  $grantoperation->enableEditorialWorkflow();
  $grantoperation->addDefaultValueToContentCategory();
}

/**
 * Implements hook_uninstall().
 */
function tide_grant_uninstall() {
  // Remove the user we created.
  if ($user = user_load_by_name('Grant Author')) {
    user_delete($user->id());
  }

  // Now cleanup the config.
  $config_factory = \Drupal::configFactory();
  // Remove the image styles that Linkit has installed.
  $config_factory->getEditable('user.role.grant_author')->delete();
}

/**
 * Implements hook_update_dependencies().
 */
function tide_grant_update_dependencies() {
  $dependencies = [];
  $dependencies['tide_grant'][10001] = ['tide_core' => 10005];
  $dependencies['tide_grant'][10002] = ['tide_core' => 10014];
  return $dependencies;
}

/**
 * Imports field.field.node.grant.field_content_category for existing sites.
 */
function tide_grant_update_10001() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_grant') . '/config/install'];
  $config_read = _tide_read_config('field.field.node.grant.field_content_category', $config_location, TRUE);
  $storage = \Drupal::entityTypeManager()->getStorage('field_config');
  $id = $storage->getIDFromConfigName('field.field.node.grant.field_content_category', $storage->getEntityType()->getConfigPrefix());
  if ($storage->load($id) == NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/updates');
  _tide_core_field_content_category_default_value('grant', 'Grant');
  _tide_core_content_category_form_display('grant');
}

/**
 * Adds custom filters field.
 */
function tide_grant_update_10002() {
  $tideUpdateHelper = \Drupal::service('tide_core.entity_update_helper');
  $configs = [
    'node.grant.field_custom_filters' => 'field_config',
    'node.grant.default' => 'entity_form_display',
    'node.grant.default' => 'entity_view_display',
    'node.grant.teaser' => 'entity_view_display',
  ];
  foreach ($configs as $name => $type) {
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    if ($storage->load($name) !== NULL) {
      continue;
    }
    else {
      $tideUpdateHelper->import($type, $name);
    }
  }

  $display_repository = \Drupal::service('entity_display.repository');
  $display_repository->getFormDisplay('node', 'grant')
    ->setComponent('field_custom_filters', [
      'type' => 'paragraphs',
      'settings' => [
        'title' => 'Custom filters',
        'title_plural' => 'Custom filter',
        'edit_mode' => 'closed',
        'closed_mode' => 'summary',
        'autocollapse' => 'none',
        'closed_mode_threshold' => 0,
        'add_mode' => 'modal',
        'form_display_mode' => 'default',
        'default_paragraph_type' => '_none',
        'default_paragraph_count' => 1,
        'features' => [
          'add_above' => '0',
          'collapse_edit_all' => 'collapse_edit_all',
          'duplicate' => '0',
        ],
      ],
    ])
    ->save();
}

/**
 * Add corner graphic fields.
 */
function tide_grant_update_10003() {
  $tideUpdateHelper = \Drupal::service('tide_core.entity_update_helper');
  $configs = [
    'node.grant.field_bottom_graphical_image' => 'field_config',
    'node.grant.field_graphical_image' => 'field_config',
    'node.grant.default' => 'entity_form_display',
    'node.grant.default' => 'entity_view_display',
    'node.grant.teaser' => 'entity_view_display',
  ];
  foreach ($configs as $name => $type) {
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    if ($storage->load($name) !== NULL) {
      continue;
    } else {
      $tideUpdateHelper->import($type, $name);
    }
  }

}
