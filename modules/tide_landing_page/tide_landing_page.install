<?php

/**
 * @file
 * Tide Landing Page install.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\tide_core\TideEntityUpdateHelper;
use Drupal\tide_landing_page\TideLandingPageOperation;

/**
 * Implements hook_install().
 */
function tide_landing_page_install() {

  // Don't do anything else during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  TideLandingPageOperation::addToWorkflows();
  TideLandingPageOperation::addToScheduledTransitions();
  TideLandingPageOperation::addWebformComponent();
  TideLandingPageOperation::assignNecessaryPermissions();
  TideLandingPageOperation::addFieldsToSearchApi();

}

/**
 * Implements hook_update_dependencies().
 */
function tide_landing_page_update_dependencies() {
  $dependencies = [];
  $dependencies['tide_landing_page'][10101] = ['tide_core' => 10005];
  $dependencies['tide_landing_page'][10106] = ['tide_core' => 10009];
  $dependencies['tide_landing_page'][10111] = ['tide_core' => 10014];
  $dependencies['tide_landing_page'][10113] = ['tide_core' => 10018];
  $dependencies['tide_landing_page'][10115] = ['tide_core' => 10024];
  return $dependencies;
}

/**
 * Update twitter name to X.
 */
function tide_landing_page_update_10100() {
  $config = \Drupal::configFactory()->getEditable('field.storage.paragraph.field_paragraph_social_list');
  $allowed_values = $config->get('settings.allowed_values');
  if ($allowed_values[0]['label'] == 'Twitter') {
    $allowed_values[0]['label'] = 'X (formerly Twitter)';
  }
  $config->set('settings.allowed_values', $allowed_values);
  $config->save();
}

/**
 * Imports landing_page.field_content_category for existing sites.
 */
function tide_landing_page_update_10101() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_landing_page') . '/config/install'];
  $config_read = _tide_read_config('field.field.node.landing_page.field_content_category', $config_location, TRUE);
  $storage = \Drupal::entityTypeManager()->getStorage('field_config');
  $id = $storage->getIDFromConfigName('field.field.node.landing_page.field_content_category', $storage->getEntityType()->getConfigPrefix());
  if ($storage->load($id) == NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/updates');
  _tide_core_content_category_form_display('landing_page');
}

/**
 * Removes latest event paragraph types.
 */
function tide_landing_page_update_10102() {
  $paragraph_types = [
    'latest_events',
    'news_listing',
  ];
  foreach ($paragraph_types as $paragraph_type) {
    $query = \Drupal::entityQuery('paragraph')
      ->accessCheck(TRUE)
      ->condition('type', $paragraph_type);
    $p_ids = $query->execute();
    if (!empty($p_ids)) {
      $p_entities = Paragraph::loadMultiple($p_ids);
      $storage_handler = \Drupal::entityTypeManager()->getStorage('paragraph');
      $storage_handler->delete($p_entities);
    }
    $p_type = \Drupal::entityTypeManager()->getStorage('paragraphs_type')->load($paragraph_type);
    if ($p_type) {
      $p_type->delete();
    }
  }
}

/**
 * Remove style option field from call to action component.
 */
function tide_landing_page_update_10103() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_landing_page') . '/config/install'];
  // Delete field configuration manually.
  $field_names = ['field_paragraph_cta_style'];
  foreach ($field_names as $field_name) {
    $field_config = FieldConfig::loadByName('paragraph', 'call_to_action', $field_name);
    if ($field_config) {
      $field_config->delete();
    }

    $field_storage_config = FieldStorageConfig::loadByName('paragraph', $field_name);
    if ($field_storage_config) {
      $field_storage_config->delete();
    }
  }

  $form_configs = [
    'core.entity_form_display.paragraph.call_to_action.default',
    'core.entity_view_display.paragraph.call_to_action.default',
    'paragraphs.paragraphs_type.call_to_action',
  ];
  foreach ($form_configs as $form_config) {
    $config = \Drupal::configFactory()->getEditable($form_config);
    $config_read = _tide_read_config($form_config, $config_location, FALSE);
    $config->set('description', $config_read['description']);
    $config->save();
  }
}

/**
 * Change weight of paragraph types.
 */
function tide_landing_page_update_10104() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_landing_page') . '/config/install'];
  $config = 'field.field.node.landing_page.field_landing_page_component';
  // Read only from /config/install.
  $config_read = _tide_read_config($config, $config_location, FALSE);
  // Get the sync file to update.
  $config_factory = \Drupal::configFactory();
  $config_sync = $config_factory->getEditable($config);
  $paragraphs = [
    'basic_text',
    'accordion',
    'promotion_card',
    'navigation_card',
    'card_keydates',
    'call_to_action',
    'card_event',
    'card_carousel',
    'embedded_webform',
    'form_embed_openforms',
    'media_gallery',
    'complex_image',
    'timelines',
    'compact_card_collection',
    'data_table',
    'statistics_grid',
  ];
  foreach ($paragraphs as $paragraph_type_id) {
    // Changing weight.
    $new_weight = $config_read['settings']['handler_settings']['target_bundles_drag_drop'][$paragraph_type_id]['weight'];
    $config_sync->set('settings.handler_settings.target_bundles_drag_drop.' . $paragraph_type_id . '.weight', $new_weight)->save();
  }
}

/**
 * Adds highlight option new value to to field_promo_card_display_style.
 */
function tide_landing_page_update_10105() {
  $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_promo_card_display_style');
  $new_field = $field_storage->getSettings()['allowed_values'];
  $new_field['highlight'] = 'Highlight';
  $field_storage->setSettings([
    'allowed_values' => $new_field,
  ]);
  $field_storage->save();
}

/**
 * Update field_landing_page_component configs.
 */
function tide_landing_page_update_10106() {
  $form_configs = [
    'field.field.node.landing_page.field_landing_page_component',
  ];
  /** @var \Drupal\tide_core\TideEntityUpdateHelper $tide_update_helper */
  $tide_update_helper = \Drupal::service('tide_core.entity_update_helper');
  $tide_update_helper->configMergeDeep('tide_landing_page', TideEntityUpdateHelper::INSTALL_DIR, $form_configs);
  $result = $tide_update_helper->updateFromOptional('base_field_override', 'paragraphs_library_item.paragraphs_library_item.paragraphs');
  if (!$result) {
    $tide_update_helper->import('base_field_override', 'paragraphs_library_item.paragraphs_library_item.paragraphs');
  }

}

/**
 * Update key_journeys.field_paragraph_title configs.
 */
function tide_landing_page_update_10107() {
  /** @var \Drupal\tide_core\TideEntityUpdateHelper $tide_update_helper */
  $tide_update_helper = \Drupal::service('tide_core.entity_update_helper');
  $tide_update_helper->revert('field_config', 'paragraph.key_journeys.field_paragraph_title');
}

/**
 * Set field `field_landing_page_hero_theme` to mandatory, description, label.
 */
function tide_landing_page_update_10108() {
  $bundles = [
    'landing_page',
    'publication',
    'publication_page',
  ];

  foreach ($bundles as $bundle) {
    $field = FieldConfig::loadByName('node', $bundle, 'field_landing_page_hero_theme');
    if (!empty($field)) {
      $field->setLabel('Page title display style');
      $field->setRequired(TRUE);
      $field->setDefaultValue('light');
      $field->setDescription('By default the page title will display in the site’s primary colour. If you choose ‘Reverse blocked text’ the heading and introduction text will be white with a coloured block behind the text (the site’s ‘accent contrast’ and ‘accent alternate’ colours). See <a href="https://ripple.sdp.vic.gov.au/design-system/components/header">Ripple header page to understand the header </a>component design.');
      $field->save();
    }
  }
}

/**
 * Set label options for `field_landing_page_hero_theme`.
 */
function tide_landing_page_update_10109() {
  $config = \Drupal::configFactory()->getEditable('field.storage.node.field_landing_page_hero_theme');
  $allowed_values = $config->get('settings.allowed_values');
  foreach ($allowed_values as $key => $allowed_value) {
    if ($allowed_value['label'] === 'Dark') {
      $allowed_values[$key]['label'] = 'Reverse blocked text';
    }
    elseif ($allowed_value['label'] === 'Light') {
      $allowed_values[$key]['label'] = 'Default';
    }
  }
  $config->set('settings.allowed_values', $allowed_values);
  $config->save();
}

/**
 * Update key_journeys.field_paragraph_links configs.
 */
function tide_landing_page_update_10110() {
  $form_configs = [
    'core.entity_view_display.paragraph.key_journeys.default',
  ];

  foreach ($form_configs as $form_config) {
    $config = \Drupal::configFactory()->getEditable($form_config);
    $dependencies = $config->get('dependencies.module');
    if (!in_array('linkit', $dependencies)) {
      $dependencies[] = 'linkit';
      $config->set('dependencies.module', $dependencies);
    }

    $content = $config->get('content.field_paragraph_links');
    $config->set('content.field_paragraph_links', $content);
    $config->save();
  }
}

/**
 * Adds custom filters field.
 */
function tide_landing_page_update_10111() {
  $tideUpdateHelper = \Drupal::service('tide_core.entity_update_helper');
  $configs = [
    'node.landing_page.field_custom_filters' => 'field_config',
    'node.landing_page.default' => 'entity_form_display',
    'node.landing_page.default' => 'entity_view_display',
    'node.landing_page.card' => 'entity_view_display',
    'node.landing_page.featured_card' => 'entity_view_display',
  ];
  foreach ($configs as $name => $type) {
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    if ($storage->load($name) !== NULL) {
      continue;
    }
    else {
      $tideUpdateHelper->import($type, $name);
    }
  }

  $display_repository = \Drupal::service('entity_display.repository');
  $display_repository->getFormDisplay('node', 'landing_page')
    ->setComponent('field_custom_filters', [
      'type' => 'paragraphs',
      'settings' => [
        'title' => 'Custom filters',
        'title_plural' => 'Custom filter',
        'edit_mode' => 'closed',
        'closed_mode' => 'summary',
        'autocollapse' => 'none',
        'closed_mode_threshold' => 0,
        'add_mode' => 'modal',
        'form_display_mode' => 'default',
        'default_paragraph_type' => '_none',
        'default_paragraph_count' => 1,
        'features' => [
          'add_above' => '0',
          'collapse_edit_all' => 'collapse_edit_all',
          'duplicate' => '0',
        ],
      ],
    ])
    ->save();
}

/**
 * Adds link_list paragraph type to landing_page_component field.
 */
function tide_landing_page_update_10112() {
  $tideUpdateHelper = \Drupal::service('tide_core.entity_update_helper');
  $configs = [
    'paragraph.field_paragraph_link_list' => 'field_storage_config',
    'paragraph.field_paragraph_link_required' => 'field_storage_config',
    'link_required' => 'paragraphs_type',
    'link_list' => 'paragraphs_type',
    'paragraph.link_required.field_paragraph_link_required' => 'field_config',
    'paragraph.link_list.field_paragraph_link_list' => 'field_config',
    'paragraph.link_required.default' => 'entity_form_display',
    'paragraph.link_list.default' => 'entity_form_display',
    'paragraph--link_required' => 'jsonapi_resource_config',
  ];
  foreach ($configs as $name => $type) {
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    if ($storage->load($name) !== NULL) {
      continue;
    }
    else {
      $tideUpdateHelper->import($type, $name);
    }
  }
  $field_landing_page_component_config = Drupal::entityTypeManager()->getStorage('field_config')->load('node.landing_page.field_landing_page_component');
  $settings = $field_landing_page_component_config->getSettings();
  $target_bundles = $settings['handler_settings']['target_bundles'];
  if (empty($target_bundles['link_list'])) {
    $target_bundles['link_list'] = 'link_list';
  }
  $positions = $settings['handler_settings']['target_bundles_drag_drop'];
  if (empty($positions['link_list'])) {
    $positions['link_list'] = [
      'weight' => 50,
      'enabled' => TRUE,
    ];
  }
  $settings['handler_settings']['target_bundles'] = $target_bundles;
  $settings['handler_settings']['target_bundles_drag_drop'] = $positions;
  $field_landing_page_component_config->setSettings($settings)->save();
}

/**
 * Add search exclude field.
 */
function tide_landing_page_update_10113() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_landing_page') . '/config/install'];
  $config_read = _tide_read_config('field.field.node.landing_page.field_search_index_exclude', $config_location, TRUE);
  $storage = \Drupal::entityTypeManager()->getStorage('field_config');
  if ($storage->load('node.landing_page.field_search_index_exclude') == NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }

  $form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.landing_page.default');

  if ($form_display) {
    // Move field to the 'content' region.
    $form_display->setComponent('field_search_index_exclude', [
      'type' => 'search_api_exclude_entity_widget',
      'weight' => 23,
      'region' => 'content',
      'settings' => [
        'field_label' => 'Yes, exclude this entity from the search indexes.',
        'use_details_container' => TRUE,
      ],
      'third_party_settings' => [],
    ]);

    $form_display->save();
  }
}

/**
 * Add search exclude field.
 */
function tide_landing_page_update_10114() {
  $site_title = 'field_landing_page_nav_title';
  $field_dep = 'field.field.node.landing_page.' . $site_title;
  // List of view display modes.
  $view_display_modes = [
    'card',
    'default',
    'featured_card',
  ];

  // Form display configuration to update.
  $form_display_name = 'core.entity_form_display.node.landing_page.default';

  // Bundle and entity type.
  $bundle = 'landing_page';
  $entity_type = 'node';

  // Process view displays.
  foreach ($view_display_modes as $mode) {
    $config_name = "core.entity_view_display.$entity_type.$bundle.$mode";
    $config = \Drupal::configFactory()->getEditable($config_name);
    if (!$config->isNew()) {
      $content = $config->get('content') ?? [];
      $hidden = $config->get('hidden') ?? [];
      $dependencies = $config->get('dependencies.config') ?? [];

      // Remove the field from content display.
      if (isset($content[$site_title])) {
        unset($content[$site_title]);
      }

      // Remove the field from hidden fields.
      if (isset($hidden[$site_title])) {
        unset($hidden[$site_title]);
      }

      // Remove the field from dependencies.
      if (($key = array_search($field_dep, $dependencies)) !== FALSE) {
        unset($dependencies[$key]);
        $dependencies = array_values($dependencies);
      }

      $config
        ->set('content', $content)
        ->set('hidden', $hidden)
        ->set('dependencies.config', $dependencies)
        ->save();
    }
  }

  // Process form display for landing_page.
  $config_form = \Drupal::configFactory()->getEditable($form_display_name);

  if (!$config_form->isNew()) {
    $content = $config_form->get('content') ?? [];
    $third_party_settings = $config_form->get('third_party_settings') ?? [];
    $dependencies = $config_form->get('dependencies.config') ?? [];
    if (isset($content[$site_title])) {
      unset($content[$site_title]);
    }
    if (!empty($third_party_settings['field_group'])) {
      foreach ($third_party_settings['field_group'] as &$group) {
        if (!empty($group['children']) && in_array($site_title, $group['children'])) {
          $group['children'] = array_values(array_diff($group['children'], [$site_title]));
        }
      }
    }

    // Remove the field from dependencies.config.
    if (in_array($field_dep, $dependencies)) {
      $dependencies = array_values(array_diff($dependencies, [$field_dep]));
    }
    $config
      ->set('content', $content)
      ->set('third_party_settings', $third_party_settings)
      ->set('dependencies.config', $dependencies)
      ->save();
  }
}

/**
 * Add organisation field to landing_page node type.
 */
function tide_landing_page_update_10115() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_landing_page') . '/config/install'];
  $config_read = _tide_read_config('field.field.node.landing_page.field_organisation', $config_location, TRUE);
  $storage = \Drupal::entityTypeManager()->getStorage('field_config');
  $id = $storage->getIDFromConfigName('field.field.node.landing_page.field_organisation', $storage->getEntityType()->getConfigPrefix());
  if ($storage->load($id) === NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }

  $field_organisation_widget_settings = [
    'type' => 'select2_entity_reference',
    'weight' => 25,
    'region' => 'content',
    'settings' => [
      'width' => '100%',
      'autocomplete' => FALSE,
      'match_operator' => 'CONTAINS',
      'match_limit' => 10,
    ],
    'third_party_settings' => [],
  ];

  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
  $entity_form_display = Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.landing_page.default');
  $entity_form_display->setComponent('field_organisation', $field_organisation_widget_settings)->save();
}
