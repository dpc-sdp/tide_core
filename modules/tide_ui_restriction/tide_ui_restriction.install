<?php

/**
 * @file
 * Install file.
 */

/**
 * Implements hook_install().
 */
function tide_ui_restriction_install($is_syncing) {
  _tide_ui_restriction_tighten_permissions();
}

/**
 * Tighten permissions.
 */
function tide_ui_restriction_update_8001() {
  if (!\Drupal::moduleHandler()->moduleExists('config_perms')) {
    \Drupal::service('module_installer')->install(['config_perms']);
  }

  module_load_include('inc', 'tide_core', 'includes/helpers');
  try {
    $config_location = [
      drupal_get_path('module', 'tide_ui_restriction') . '/config/install',
    ];
    $config = 'config_perms.custom_perms_entity.administer_custom_block_types';
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage('custom_perms_entity');
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
  catch (\Exception $exception) {
    watchdog_exception('tide_ui_restriction', $exception);
  }

  _tide_ui_restriction_tighten_permissions();
}

/**
 * Tighten the default permissions.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _tide_ui_restriction_tighten_permissions() {
  $admin_only = ['administrator'];
  $site_admin_only = ['administrator', 'site_admin'];
  $editor_only = ['administrator', 'site_admin', 'approver', 'editor'];

  $custom_perms = [
    'Administer custom block types' => $admin_only,
    'administer content types' => $admin_only,
    'administer display modes' => $admin_only,
    'administer media types' => $admin_only,
    'administer migrations' => $admin_only,
    'administer paragraphs types' => $admin_only,
    'administer themes' => $admin_only,
    'administer modules' => $admin_only,
    'access site reports' => $admin_only,
    'access admin_config pages' => $admin_only,

    'administer taxonomy' => $site_admin_only,
    'administer users' => $site_admin_only,
    'access admin audit trail' => $site_admin_only,
    'access event log track' => $site_admin_only,
    'administer pathauto' => $site_admin_only,
    'administer redirect settings' => $site_admin_only,

    'access administration pages' => $editor_only,
    'administer url aliases' => $editor_only,
    'administer redirects' => $editor_only,
  ];

  /** @var \Drupal\user\RoleInterface[] $roles */
  $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();

  foreach ($roles as $rid => $role) {
    foreach ($custom_perms as $permission => $permission_rids) {
      if (in_array($rid, $permission_rids)) {
        $role->grantPermission($permission);
      }
      else {
        $role->revokePermission($permission);
      }
    }
    $role->save();
  }
}
