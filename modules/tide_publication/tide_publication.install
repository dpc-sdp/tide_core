<?php

/**
 * @file
 * Install file.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\field\Entity\FieldConfig;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\tide_core\TideEntityUpdateHelper;
use Drupal\tide_publication\TidePublicationOperation;

/**
 * Implements hook_install().
 */
function tide_publication_install() {
  // Don't do anything else during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  TidePublicationOperation::addToWorkflows();
  TidePublicationOperation::addToScheduledTransitions();
  TidePublicationOperation::assignNecessaryPermissions(FALSE);
  TidePublicationOperation::addFieldsToSearchApi();

  // Creates vocabulary if doesn't exist.
  $vocabularies = Vocabulary::loadMultiple();
  if (!isset($vocabularies['organisation'])) {
    TidePublicationOperation::createVocabulary('organisation');
  }

}

/**
 * Implements hook_uninstall().
 */
function tide_publication_uninstall() {
  TidePublicationOperation::assignNecessaryPermissions(TRUE);
}

/**
 * Update pathauto.pattern.publication_pages to be compatible with D10.
 */
function tide_publication_update_10001() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('pathauto.pattern.publication_pages');
  $config->set('selection_criteria.96994a80-9dfb-4bf3-b9cf-7fc3e3503c56.id', 'entity_bundle:node');
  $config->save();
}

/**
 * Implements hook_update_dependencies().
 */
function tide_publication_update_dependencies() {
  $dependencies = [];
  $dependencies['tide_publication'][10003] = ['tide_core' => 10005];
  $dependencies['tide_publication'][10008] = ['tide_core' => 10014];
  $dependencies['tide_publication'][10010] = ['tide_core' => 10018];
  $dependencies['tide_publication'][10012] = ['tide_core' => 10023];
  return $dependencies;
}

/**
 * Update field_publication_authors cardinality and vocabulary to organisation.
 */
function tide_publication_update_10002() {
  $tidePublicationOperation = new TidePublicationOperation();
  $vocabulary = 'organisation';
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('field.storage.node.field_publication_authors');
  $config->set('cardinality', 1);
  $config->save();

  // Creates vocabulary if doesn't exist.
  $vocabularies = Vocabulary::loadMultiple();
  if (!isset($vocabularies[$vocabulary])) {
    $tidePublicationOperation->createVocabulary($vocabulary);
  }

  $field = FieldConfig::loadByName('node', 'publication', 'field_publication_authors');
  if ($field->get('field_type') === 'entity_reference') {
    $new_field = $field->toArray();
    $new_field['field_type'] = 'entity_reference';
    $new_field['description'] = 'Start typing to choose one publication author. (Authors are added in the organisation taxonomy by your Site Admins.)';
    $new_field['dependencies'] = [
      'config' => [
        'field.storage.' . $config->get('id'),
        'node.type.publication',
        'taxonomy.vocabulary.' . $vocabulary,
      ],
    ];
    $new_field['settings'] = [
      'handler_settings' => [
        'target_bundles' => [
          'department' => $vocabulary,
        ],
      ],
    ];
    $new_field = FieldConfig::create($new_field);
    $new_field->original = $field;
    $new_field->enforceIsNew(FALSE);
    $new_field->save();
  }
}

/**
 * Imports publication.field_content_category for existing sites.
 */
function tide_publication_update_10003() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_publication') . '/config/install'];
  $config_read = _tide_read_config('field.field.node.publication.field_content_category', $config_location, TRUE);
  $storage = \Drupal::entityTypeManager()->getStorage('field_config');
  $id = $storage->getIDFromConfigName('field.field.node.publication.field_content_category', $storage->getEntityType()->getConfigPrefix());
  if ($storage->load($id) == NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/updates');
  _tide_core_content_category_form_display('publication');
}

/**
 * Update field_landing_page_component configs.
 */
function tide_publication_update_10004() {
  $form_configs = [
    'field.field.node.publication.field_landing_page_component',
    'field.field.node.publication_page.field_landing_page_component',
  ];
  /** @var \Drupal\tide_core\TideEntityUpdateHelper $s */
  $tide_update_helper = \Drupal::service('tide_core.entity_update_helper');
  $tide_update_helper->configMergeDeep('tide_landing_page', TideEntityUpdateHelper::INSTALL_DIR, $form_configs);
}

/**
 * Imports publication_page.field_content_category for existing sites.
 */
function tide_publication_update_10005() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_publication') . '/config/install'];
  $config_read = _tide_read_config('field.field.node.publication_page.field_content_category', $config_location, TRUE);
  $storage = \Drupal::entityTypeManager()->getStorage('field_config');
  $id = $storage->getIDFromConfigName('field.field.node.publication_page.field_content_category', $storage->getEntityType()->getConfigPrefix());
  if ($storage->load($id) == NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/updates');
  _tide_core_content_category_form_display('publication_page');
}

/**
 * Add logo, top and bottom corner graphic field.
 */
function tide_publication_update_10006() {
  $configs = [
    'field.field.node.publication.field_bottom_graphical_image' => 'field_config',
    'field.field.node.publication.field_graphical_image' => 'field_config',
    'field.field.node.publication.field_landing_page_hero_logo' => 'field_config',
    'field.field.node.publication_page.field_bottom_graphical_image' => 'field_config',
    'field.field.node.publication_page.field_graphical_image' => 'field_config',
    'field.field.node.publication_page.field_landing_page_hero_logo' => 'field_config',
    'field.field.node.publication_page.field_metatags' => 'field_config',
    'field.field.node.publication_page.field_show_topic_term_and_tags' => 'field_config',
    'field.field.node.publication.field_metatags' => 'field_config',
    'field.field.node.publication.field_show_topic_term_and_tags' => 'field_config',
  ];
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_publication') . '/config/install'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = $storage->getIDFromConfigName($config, $storage->getEntityType()->getConfigPrefix());
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }

  $form_configs = [
    'core.entity_form_display.node.publication.default',
    'core.entity_form_display.node.publication_page.default',
    'core.entity_view_display.node.publication.default',
    'core.entity_view_display.node.publication_page.default',
    'field.field.node.publication_page.field_landing_page_component',
    'field.field.node.publication.field_landing_page_component',
  ];
  foreach ($form_configs as $form_config) {
    $rewrite = _tide_read_config($form_config, $config_location, FALSE);
    $display_config_entity = \Drupal::configFactory()->getEditable($form_config);
    $original_config = $display_config_entity->getRawData();
    $rewritten_config = NestedArray::mergeDeep($original_config, $rewrite);
    if ($rewritten_config['dependencies']) {
      $dependencies = $rewritten_config['dependencies'];
      foreach ($dependencies as $type => $items) {
        $uniqueItems = array_unique($items);
        sort($uniqueItems);
        $dependencies[$type] = $uniqueItems;
      }
      $rewritten_config['dependencies'] = $dependencies;
    }
    $display_config_entity->setData($rewritten_config);
    $display_config_entity->save();
  }

  // Deleting the field instance (field config).
  $field_config = FieldConfig::loadByName('node', 'publication_page', 'field_content_category');
  if ($field_config) {
    $field_config->delete();
  }

}

/**
 * Update publication_page.field_landing_page_component config.
 */
function tide_publication_update_10007() {
  $form_configs = [
    'field.field.node.publication_page.field_landing_page_component',
  ];
  /** @var \Drupal\tide_core\TideEntityUpdateHelper $s */
  $tide_update_helper = \Drupal::service('tide_core.entity_update_helper');
  $tide_update_helper->configMergeDeep('tide_publication', TideEntityUpdateHelper::INSTALL_DIR, $form_configs);
}

/**
 * Adds custom filters field on publication and publication page content types.
 */
function tide_publication_update_10008() {
  $tideUpdateHelper = \Drupal::service('tide_core.entity_update_helper');
  $configs = [
    'node.publication.field_custom_filters' => 'field_config',
    'node.publication_page.field_custom_filters' => 'field_config',
    'node.publication.default' => 'entity_form_display',
    'node.publication_page.default' => 'entity_form_display',
    'node.publication.default' => 'entity_view_display',
    'node.publication_page.default' => 'entity_view_display',
    'node.publication.teaser' => 'entity_view_display',
    'node.publication_page.teaser' => 'entity_view_display',
  ];
  foreach ($configs as $name => $type) {
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    if ($storage->load($name) !== NULL) {
      continue;
    }
    else {
      $tideUpdateHelper->import($type, $name);
    }
  }

  $bundles = ['publication', 'publication_page'];

  foreach ($bundles as $bundle) {
    $display_repository = \Drupal::service('entity_display.repository');
    $display_repository->getFormDisplay('node', $bundle)
      ->setComponent('field_custom_filters', [
        'type' => 'paragraphs',
        'settings' => [
          'title' => 'Custom filters',
          'title_plural' => 'Custom filter',
          'edit_mode' => 'closed',
          'closed_mode' => 'summary',
          'autocollapse' => 'none',
          'closed_mode_threshold' => 0,
          'add_mode' => 'modal',
          'form_display_mode' => 'default',
          'default_paragraph_type' => '_none',
          'default_paragraph_count' => 1,
          'features' => [
            'add_above' => '0',
            'collapse_edit_all' => 'collapse_edit_all',
            'duplicate' => '0',
          ],
        ],
      ])
      ->save();
  }
}

/**
 * Update the position of field_topic for the publication type.
 */
function tide_publication_update_10009() {
  /** @var \Drupal\tide_core\TideEntityUpdateHelper $tideEntityUpdateHelper */
  $tideEntityUpdateHelper = \Drupal::service('tide_core.entity_update_helper');
  $config = \Drupal::configFactory()->getEditable('core.entity_form_display.node.publication.default');
  $data = $config->getRawData();
  if (!isset($data['content']['field_topic']) || !isset($data['content']['field_content_category'])) {
    return;
  }
  $data['content'] = $tideEntityUpdateHelper->repositionComponentsRelativeToKey($data['content'], ['field_topic' => $data['content']['field_topic']], 'field_content_category', TideEntityUpdateHelper::POSITION_BEFORE);
  $config->setData($data);
  $config->save();
}

/**
 * Add search exclude field.
 */
function tide_publication_update_10010() {
  // Import search exclude fields.
  $field_configs = [
    'field.field.node.publication.field_search_index_exclude' => 'field_config',
    'field.field.node.publication_page.field_search_index_exclude' => 'field_config',
  ];
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_publication') . '/config/install'];
  // Check if field already exported to config/sync.
  foreach ($field_configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = $storage->getIDFromConfigName($config, $storage->getEntityType()->getConfigPrefix());
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }

  $form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.publication.default');

  if ($form_display) {
    // Move field to the 'content' region.
    $form_display->setComponent('field_search_index_exclude', [
      'type' => 'search_api_exclude_entity_widget',
      'weight' => 20,
      'region' => 'content',
      'settings' => [
        'field_label' => 'Yes, exclude this entity from the search indexes.',
        'use_details_container' => TRUE,
      ],
      'third_party_settings' => [],
    ]);

    $form_display->save();
  }
  $form_publication = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.publication_page.default');

  if ($form_publication) {
    // Move field to the 'content' region.
    $form_publication->setComponent('field_search_index_exclude', [
      'type' => 'search_api_exclude_entity_widget',
      'weight' => 17,
      'region' => 'content',
      'settings' => [
        'field_label' => 'Yes, exclude this entity from the search indexes.',
        'use_details_container' => TRUE,
      ],
      'third_party_settings' => [],
    ]);

    $form_publication->save();
  }

}

/**
 * Remove publication_nav field configs.
 */
function tide_publication_update_10011() {
  $configs = [
    // Form and view display configs.
    'core.entity_form_display.node.publication.default',
    'core.entity_view_display.node.publication.default',
    'core.entity_view_display.node.publication.teaser',
    'core.entity_form_display.node.publication_page.default',
    'core.entity_view_display.node.publication_page.default',
    'core.entity_view_display.node.publication_page.teaser',
  ];

  foreach ($configs as $config_name) {
    $config = \Drupal::configFactory()->getEditable($config_name);
    $changed = FALSE;

    // Remove dependency config entries.
    $dependencies = $config->get('dependencies.config');
    if (is_array($dependencies)) {
      $dependencies = array_filter($dependencies, function ($item) {
        return $item !== 'field.field.node.publication.field_show_publication_nav'
            && $item !== 'field.field.node.publication_page.field_show_publication_nav';
      });
      $config->set('dependencies.config', array_values($dependencies));
      $changed = TRUE;
    }

    // Remove third_party field group if it's a form display.
    if (
      in_array($config_name, [
        'core.entity_form_display.node.publication.default',
        'core.entity_form_display.node.publication_page.default',
      ])
    ) {
      if ($config->get('third_party_settings.field_group.group_publication_navigation')) {
        $third_party = $config->get('third_party_settings');
        unset($third_party['field_group']['group_publication_navigation']);
        $config->set('third_party_settings', $third_party);
        $changed = TRUE;
      }
    }

    // Remove from content.
    if ($config->get('content.field_show_publication_nav')) {
      $content = $config->get('content');
      unset($content['field_show_publication_nav']);
      $config->set('content', $content);
      $changed = TRUE;
    }

    // Remove from hidden.
    if ($config->get('hidden.field_show_publication_nav')) {
      $hidden = $config->get('hidden');
      unset($hidden['field_show_publication_nav']);
      $config->set('hidden', $hidden);
      $changed = TRUE;
    }

    if ($changed) {
      $config->save();
    }
  }

  // Delete field config definitions.
  $field_configs = [
    'field.field.node.publication.field_show_publication_nav',
    'field.field.node.publication_page.field_show_publication_nav',
  ];

  foreach ($field_configs as $field_config_name) {
    $field_config = \Drupal::configFactory()->getEditable($field_config_name);
    if (!$field_config->isNew()) {
      $field_config->delete();
    }
  }

  // Delete field storage.
  $storage_config_name = 'field.storage.node.field_show_publication_nav';
  $storage_config = \Drupal::configFactory()->getEditable($storage_config_name);
  if (!$storage_config->isNew()) {
    $storage_config->delete();
  }

  // Update JSON:API Extras resource configs.
  $jsonapi_configs = [
    'jsonapi_extras.jsonapi_resource_config.node--publication',
    'jsonapi_extras.jsonapi_resource_config.node--publication_page',
  ];

  foreach ($jsonapi_configs as $jsonapi_config_name) {
    $jsonapi_config = \Drupal::configFactory()->getEditable($jsonapi_config_name);
    $resource_fields = $jsonapi_config->get('resourceFields');
    if (isset($resource_fields['field_show_publication_nav'])) {
      unset($resource_fields['field_show_publication_nav']);
      $jsonapi_config->set('resourceFields', $resource_fields)->save();
    }
  }
}

/**
 * Tags relocation for the publication content type.
 */
function tide_publication_update_10012() {
  $group_publication_metadata = [
    'children' => [
      'field_license_type',
      'field_publication_date',
      'field_publication_authors',
    ],
    'label' => 'Publication infomation',
    'region' => 'content',
    'parent_name' => '',
    'weight' => 3,
    'format_type' => 'details',
    'format_settings' => [
      'classes' => '',
      'show_empty_fields' => TRUE,
      'id' => '',
      'label_as_html' => FALSE,
      'open' => TRUE,
      'description' => '',
      'required_fields' => TRUE,
    ],
  ];

  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
  $entity_form_display = Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.publication.default');
  $field_group = $entity_form_display->getThirdPartySettings('field_group');

  if (isset($field_group['group_publication_metadata'])) {
    $entity_form_display->setThirdPartySetting('field_group', 'group_publication_metadata', $group_publication_metadata);
  }
  $entity_form_display->save();
}
