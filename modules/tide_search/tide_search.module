<?php

/**
 * @file
 * Tide Search module functionality.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\search_api\IndexInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function tide_search_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $field_config = 'node.tide_search_listing.field_custom_filters';
  $storage = \Drupal::entityTypeManager()->getStorage('field_config');

  if ($storage->load($field_config) !== NULL && $form_id === 'node_tide_search_listing_form') {
    $field_config_storage = $storage->load($field_config);
    $settings = $field_config_storage->getSettings();
    if (
      (
        is_array($settings['handler_settings'])
        && isset($settings['handler_settings']['target_bundles'])
        && !is_array($settings['handler_settings']['target_bundles'])
      )
      || empty($settings['handler_settings'])
    ) {
      $form['field_custom_filters']['#access'] = FALSE;
    }
  }
  if (in_array($form_id, [
    'node_tide_search_listing_form',
    'node_tide_search_listing_edit_form',
    'node_tide_search_listing_quick_node_clone_form',
  ])) {

    $form['#process'][] = '_tide_search_form_node_form_process';
    $form['#after_build'][] = '_tide_search_form_node_form_after_build';
  }
}

/**
 * Implements hook_search_api_index_items_alter().
 */
function tide_search_search_api_index_items_alter(IndexInterface $index, array &$items) {
  // Get any fields of type date and format it's value to align with RFC-3339.
  $index_fields = $index->getFields();
  $date_field_ids = [];
  foreach ($index_fields as $field_id => $index_field) {
    if ($index_field->getType() === 'date') {
      $date_field_ids[$field_id] = $field_id;
    }
  }
  foreach ($items as $item) {
    foreach ($date_field_ids as $field_id) {
      $date_field = $item->getField($field_id);
      if ($date_field) {
        $values = $date_field->getValues();
        foreach ($values as &$value) {
          $value = _tide_search_get_formatted_date($value);
        }
        unset($value);
        $date_field->setValues($values);
        $item->setField($field_id, $date_field);
      }
    }
  }
}

/**
 * Converts timestamp to RFC-3339 format.
 *
 * @param int $ts
 *   Timestamp.
 *
 * @return string
 *   Formatted date.
 */
function _tide_search_get_formatted_date($ts) {
  if (!is_numeric($ts)) {
    return $ts;
  }
  $config = \Drupal::config('system.date');
  $timezone = new DateTimeZone($config->get('timezone.default'));
  $date = new \Datetime();
  $date->setTimezone($timezone);
  $date = $date->setTimestamp($ts);

  return $date->format('Y-m-d\TH:i:sP');
}

/**
 * Implements hook_admin_audit_trail_handlers().
 */
function tide_search_admin_audit_trail_handlers() {
  // Page event log handler.
  $handlers = [];
  $handlers['tide_search'] = [
    'title' => t('Tide Search'),
  ];
  return $handlers;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function _tide_search_form_node_form_process(array $form, FormStateInterface $form_state, array $complete_form = []) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  // Add pseudo radio buttons for Header style.
  $form['_header_style'] = [
    '#type' => 'container',
    '#group' => 'group_customised_header',
    '#weight' => -100,
  ];
  $form['_header_style']['_header_style_options'] = [
    '#title' => t('Header style'),
    '#description' => t('The header can be customised to incorporate a custom top corner graphic.'),
    '#type' => 'radios',
    '#required' => TRUE,
    '#options' => [
      'default' => t('Default appearance'),
      'corner' => t('Custom top corner graphic'),
    ],
  ];

  // Set initial value for Header style based on field_graphical_image.
  $header_style = 'default';
  if (!$node->get('field_graphical_image')->isEmpty()) {
    $header_style = 'corner';
  }
  $form['_header_style']['_header_style_options']['#default_value'] = $header_style;

  // Control of the graphical image field based on the selected header style.
  $form['field_graphical_image']['#states']['visible'] = [
    ':input[name="_header_style_options"]' => ['value' => 'corner'],
  ];

  return $form;
}

/**
 * Implements after build for tide search listings.
 */
function _tide_search_form_node_form_after_build(array $form, FormStateInterface $form_state) {
  // Ensure the header style is correctly set based on field state.
  $form_hero_top_graphical_empty = empty($form_state->getValue(['field_graphical_image', 'target_id']));
  $header_style = $form_hero_top_graphical_empty ? 'default' : 'corner';
  $form['_header_style']['_header_style_options']['#default_value'] = $header_style;

  return $form;
}

/**
 * Implements hook_config_schema_info_alter().
 */
function tide_search_config_schema_info_alter(&$schema) {
  if (isset($schema['plugin.plugin_configuration.search_api_backend.elasticsearch']['mapping'])) {
    $schema['plugin.plugin_configuration.search_api_backend.elasticsearch']['mapping']['num_of_shards'] = [
      'type' => 'integer',
      'label' => 'The number of shards',
    ];
    $schema['plugin.plugin_configuration.search_api_backend.elasticsearch']['mapping']['num_of_replicas'] = [
      'type' => 'integer',
      'label' => 'The number of replicas',
    ];
  }
}
