<?php

/**
 * @file
 * Install file.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\tide_search\TideSearchOperation;

/**
 * Implements hook_install().
 */
function tide_search_install() {
  $tideSearchOperation = new TideSearchOperation();
  $tideSearchOperation->removeTideAlertFromDatasource();
}

/**
 * Implements hook_update_dependencies().
 */
function tide_search_update_dependencies() {
  $dependencies = [];
  $dependencies['tide_search'][10004] = ['tide_core' => 10005];
  $dependencies['tide_search'][10006] = ['tide_core' => 10014];
  $dependencies['tide_search'][10007] = ['tide_core' => 10018];
  return $dependencies;
}

/**
 * Install module tide_data_pipeline.
 */
function tide_search_update_10001() {
  if (!\Drupal::moduleHandler()->moduleExists('tide_data_pipeline')) {
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['tide_data_pipeline']);
  }
}

/**
 * Add secondary campaign to search listing.
 */
function tide_search_update_10002() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_search') . '/config/optional'];

  $config = 'field.field.node.tide_search_listing.field_landing_page_c_secondary';
  $type = 'field_config';
  $config_read = _tide_read_config($config, $config_location);
  $storage = \Drupal::entityTypeManager()->getStorage($type);
  $id = substr($config, strrpos($config, '.') + 1);
  if ($storage->load($id) == NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }

  $form_configs = [
    'core.entity_view_display.node.tide_search_listing.default',
    'core.entity_form_display.node.tide_search_listing.default',
    'core.entity_view_display.node.tide_search_listing.teaser',
  ];
  foreach ($form_configs as $form_config) {
    $config = \Drupal::configFactory()->getEditable($form_config);
    $config_read = _tide_read_config($form_config, $config_location, FALSE);
    $config->set('dependencies', $config_read['dependencies']);
    $config->set('content', $config_read['content']);
    $config->set('hidden', $config_read['hidden']);
    $config->save();
  }
}

/**
 * Adds field_above_results_content field to search listing.
 */
function tide_search_update_10003() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_search') . '/config/optional'];

  $configs = [
    'field.storage.node.field_above_results_content' => 'field_storage_config',
    'field.field.node.tide_search_listing.field_above_results_content' => 'field_config',
  ];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }

  $form_configs = [
    'core.entity_form_display.node.tide_search_listing.default',
    'core.entity_view_display.node.tide_search_listing.default',
    'core.entity_view_display.node.tide_search_listing.teaser',
  ];
  foreach ($form_configs as $form_config) {
    $config = \Drupal::configFactory()->getEditable($form_config);
    $config_read = _tide_read_config($form_config, $config_location, FALSE);
    $config->set('dependencies', $config_read['dependencies']);
    $config->set('content', $config_read['content']);
    $config->set('hidden', $config_read['hidden']);
    $config->save();
  }
}

/**
 * Imports field_content_category field for existing sites.
 */
function tide_search_update_10004() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_search') . '/config/optional'];
  $config_read = _tide_read_config('field.field.node.tide_search_listing.field_content_category', $config_location, TRUE);
  $storage = \Drupal::entityTypeManager()->getStorage('field_config');
  $id = $storage->getIDFromConfigName('field.field.node.tide_search_listing.field_content_category', $storage->getEntityType()->getConfigPrefix());
  if ($storage->load($id) == NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/updates');
  _tide_core_field_content_category_default_value('tide_search_listing', 'Search listing');
  _tide_core_content_category_form_display('tide_search_listing');
}

/**
 * Add top corner graphic field.
 */
function tide_search_update_10005() {
  $configs = [
    'field.field.node.tide_search_listing.field_graphical_image' => 'field_config',
  ];
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_search') . '/config/optional'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = $storage->getIDFromConfigName($config, $storage->getEntityType()->getConfigPrefix());
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }

  $form_configs = [
    'core.entity_form_display.node.tide_search_listing.default',
    'core.entity_view_display.node.tide_search_listing.default',
    'core.entity_view_display.node.tide_search_listing.teaser',
  ];
  foreach ($form_configs as $form_config) {
    $rewrite = _tide_read_config($form_config, $config_location, FALSE);
    $display_config_entity = \Drupal::configFactory()->getEditable($form_config);
    $original_config = $display_config_entity->getRawData();
    $rewritten_config = NestedArray::mergeDeep($original_config, $rewrite);
    if ($rewritten_config['dependencies']) {
      $dependencies = $rewritten_config['dependencies'];
      foreach ($dependencies as $type => $items) {
        $uniqueItems = array_unique($items);
        sort($uniqueItems);
        $dependencies[$type] = $uniqueItems;
      }
      $rewritten_config['dependencies'] = $dependencies;
    }
    $display_config_entity->setData($rewritten_config);
    $display_config_entity->save();
  }
}

/**
 * Adds custom filters field.
 */
function tide_search_update_10006() {
  $tideUpdateHelper = \Drupal::service('tide_core.entity_update_helper');
  $configs = [
    'node.tide_search_listing.field_custom_filters' => 'field_config',
    'node.tide_search_listing.default' => 'entity_form_display',
    'node.tide_search_listing.default' => 'entity_view_display',
    'node.tide_search_listing.teaser' => 'entity_view_display',
  ];
  foreach ($configs as $name => $type) {
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    if ($storage->load($name) !== NULL) {
      continue;
    }
    else {
      $tideUpdateHelper->import($type, $name);
    }
  }

  $display_repository = \Drupal::service('entity_display.repository');
  $display_repository->getFormDisplay('node', 'tide_search_listing')
    ->setComponent('field_custom_filters', [
      'type' => 'paragraphs',
      'settings' => [
        'title' => 'Custom filters',
        'title_plural' => 'Custom filter',
        'edit_mode' => 'closed',
        'closed_mode' => 'summary',
        'autocollapse' => 'none',
        'closed_mode_threshold' => 0,
        'add_mode' => 'modal',
        'form_display_mode' => 'default',
        'default_paragraph_type' => '_none',
        'default_paragraph_count' => 1,
        'features' => [
          'add_above' => '0',
          'collapse_edit_all' => 'collapse_edit_all',
          'duplicate' => '0',
        ],
      ],
    ])
    ->save();
}

/**
 * Add exclude field to search index.
 */
function tide_search_update_10007() {
  $config = \Drupal::configFactory()->getEditable('search_api.index.node');
  $exclude_entities = [
    'fields' => [
      'node' => ['field_search_index_exclude'],
      'taxonomy_term' => [],
    ],
  ];
  $config->set('processor_settings.search_api_exclude_entity_processor', $exclude_entities);
  $config->save();
}

/**
 * Add number_of_shards setting to Elasticsearch Bay config.
 */
function tide_search_update_10008() {
  $config = \Drupal::service('config.factory')->getEditable('search_api.server.elasticsearch_bay');
  $backend_config = $config->get('backend_config') ?? [];

  if (!isset($backend_config['number_of_shards'])) {
    $backend_config['number_of_shards'] = 1;
    $config->set('backend_config', $backend_config)->save();
  }
}

/**
 * Function to update form display config for tide_search_listing.
 */
function _tide_search_update_form_display() {
  // Read Confgis.
  $active_config = \Drupal::service('config.factory')->getEditable('core.entity_form_display.node.tide_search_listing.default');
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_search') . '/config/optional'];

  $source_config = _tide_read_config('core.entity_form_display.node.tide_search_listing.default', $config_location, FALSE);

  // Add field dependencies.
  $dependencies_config = $active_config->get('dependencies.config') ?: [];
  $fields_to_add = [
    'field.field.node.tide_search_listing.field_listing_result_type',
    'field.field.node.tide_search_listing.field_sort_by_config_non_admin',
  ];
  foreach ($fields_to_add as $field) {
    if (!in_array($field, $dependencies_config, TRUE)) {
      $dependencies_config[] = $field;
    }
  }

  $active_config->set('dependencies.config', $dependencies_config);

  // Add module dependency.
  $dependencies_module = $active_config->get('dependencies.module') ?: [];
  if (!in_array('default_paragraphs', $dependencies_module, TRUE)) {
    $dependencies_module[] = 'default_paragraphs';
    $active_config->set('dependencies.module', $dependencies_module);
  }

  // Merge third_party_settings:field_group.
  $field_groups = $source_config['third_party_settings']['field_group'] ?? [];
  if (!empty($field_groups)) {
    $active_groups = $active_config->get('third_party_settings.field_group') ?: [];
    foreach ($field_groups as $group_key => $group_config) {
      if (isset($active_groups[$group_key])) {
        $active_groups[$group_key] = array_merge($active_groups[$group_key], $group_config);
      }
    }
    $active_config->set('third_party_settings.field_group', $active_groups);
  }

  // Merge field components.
  $source_fields = $source_config['content'] ?? [];
  $active_fields = $active_config->get('content') ?: [];

  if (!empty($source_fields)) {
    foreach ($source_fields as $field_key => $field_config) {
      if (isset($active_fields[$field_key])) {
        $active_fields[$field_key] = array_merge($active_fields[$field_key], $field_config);
      }
    }
  }

  // Ensure field_listing_result_type is present.
  if (!isset($active_fields['field_listing_result_type'])) {
    $active_fields['field_listing_result_type'] = [
      'type' => 'select2',
      'weight' => 11,
      'region' => 'content',
      'settings' => [
        'width' => '100%',
      ],
      'third_party_settings' => [],
    ];
  }

  // Make sure it is not disabled.
  $hidden = $active_config->get('hidden') ?: [];
  if (isset($hidden['field_listing_result_type'])) {
    unset($hidden['field_listing_result_type']);
    $active_config->set('hidden', $hidden);
  }

  // Ensure field_sort_by_config_non_admin is present.
  if (!isset($active_fields['field_sort_by_config_non_admin'])) {
    $active_fields['field_sort_by_config_non_admin'] = [
      'type' => 'select2',
      'weight' => 12,
      'region' => 'content',
      'settings' => [
        'width' => '100%',
      ],
      'third_party_settings' => [],
    ];
  }

  // Make sure it is not disabled.
  if (isset($hidden['field_sort_by_config_non_admin'])) {
    unset($hidden['field_sort_by_config_non_admin']);
    $active_config->set('hidden', $hidden);
  }

  $active_config->set('content', $active_fields);
  $active_config->save();
}

/**
 * Function to update view display configs for tide_search_listing.
 */
function _tide_search_update_view_display() {
  // Read Confgis.
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_search') . '/config/optional'];

  // Default view display.
  $active_default = \Drupal::service('config.factory')->getEditable('core.entity_view_display.node.tide_search_listing.default');
  $source_default = _tide_read_config('core.entity_view_display.node.tide_search_listing.default', $config_location, FALSE);

  if ($active_default && $source_default) {

    // Add dependencies:config.
    $dependencies_config = $active_default->get('dependencies.config') ?: [];
    foreach ([
      'field.field.node.tide_search_listing.field_content_category',
      'field.field.node.tide_search_listing.field_listing_result_type',
      'field.field.node.tide_search_listing.field_sort_by_config_non_admin',
    ] as $dep) {
      if (!in_array($dep, $dependencies_config, TRUE)) {
        $dependencies_config[] = $dep;
      }
    }
    $active_default->set('dependencies.config', $dependencies_config);

    // Add dependencies:module.
    $dependencies_module = $active_default->get('dependencies.module') ?: [];
    if (!in_array('options', $dependencies_module, TRUE)) {
      $dependencies_module[] = 'options';
    }
    $active_default->set('dependencies.module', $dependencies_module);

    // Add field_listing_result_type under content.
    $content = $active_default->get('content') ?: [];
    if (!isset($content['field_listing_result_type']) && isset($source_default['content']['field_listing_result_type'])) {
      $content['field_listing_result_type'] = $source_default['content']['field_listing_result_type'];
    }

    // Add field_sort_by_config_non_admin.
    if (!isset($content['field_sort_by_config_non_admin'])) {
      $content['field_sort_by_config_non_admin'] = [
        'type' => 'list_default',
        'label' => 'above',
        'settings' => [],
        'third_party_settings' => [],
        'weight' => 123,
        'region' => 'content',
      ];
    }

    $active_default->set('content', $content);
    $active_default->save();
  }

  // Teaser view display.
  $active_teaser = \Drupal::service('config.factory')->getEditable('core.entity_view_display.node.tide_search_listing.teaser');
  if ($active_teaser) {

    // Add dependencies:config.
    $dependencies_config = $active_teaser->get('dependencies.config') ?: [];
    foreach ([
      'field.field.node.tide_search_listing.field_content_category',
      'field.field.node.tide_search_listing.field_listing_result_type',
      'field.field.node.tide_search_listing.field_sort_by_config_non_admin',
    ] as $dep) {
      if (!in_array($dep, $dependencies_config, TRUE)) {
        $dependencies_config[] = $dep;
      }
    }
    $active_teaser->set('dependencies.config', $dependencies_config);
    $active_teaser->save();
  }
}

/**
 * Add changes for self service search listing.
 */
function tide_search_update_10009() {
  // Install the dependency module.
  // Helps to set mutiple default paragraph for one field.
  if (!\Drupal::moduleHandler()->moduleExists('default_paragraphs')) {
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['default_paragraphs']);
  }
  // Add the new non-admin field.
  $configs = [
    'field.storage.node.field_listing_result_type' => 'field_storage_config',
    'field.storage.node.field_sort_by_config_non_admin' => 'field_storage_config',
    'field.field.node.tide_search_listing.field_listing_result_type' => 'field_config',
    'field.field.node.tide_search_listing.field_sort_by_config_non_admin' => 'field_config',
  ];

  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_search') . '/config/optional'];

  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = $storage->getIDFromConfigName($config, $storage->getEntityType()->getConfigPrefix());

    if ($storage->load($id) === NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }

  // Update labels.
  $config_factory = \Drupal::configFactory();
  $updates = [
    'field.field.node.tide_search_listing.field_custom_sort_configuration' => 'Sort by configuration',
    'field.field.node.tide_search_listing.field_search_input_placeholder' => 'Search bar placeholder text',
    'field.field.paragraph.searchable_fields.field_input_label' => 'Filter label',
  ];

  foreach ($updates as $config_name => $new_label) {
    $config = $config_factory->getEditable($config_name);
    if ($config->isNew()) {
      continue;
    }

    $current_label = $config->get('label');
    if ($current_label !== $new_label) {
      $config->set('label', $new_label)->save();
    }
  }

  // Update displays.
  _tide_search_update_form_display();
  _tide_search_update_view_display();

  // Add permissions to access search listing.
  $role_storage = \Drupal::entityTypeManager()->getStorage('user_role');

  $permissions = [
    'create tide_search_listing content',
    'delete own tide_search_listing content',
    'edit own tide_search_listing content',
    'edit any tide_search_listing content',
  ];

  $roles = ['approver_plus', 'approver', 'editor'];

  foreach ($roles as $role_id) {
    /** @var \Drupal\user\RoleInterface $role */
    $role = $role_storage->load($role_id);
    if (!$role) {
      continue;
    }

    foreach ($permissions as $permission) {
      if (!$role->hasPermission($permission)) {
        $role->grantPermission($permission);
      }
    }
    $role->save();
  }
}
