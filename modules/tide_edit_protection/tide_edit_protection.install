<?php

/**
 * @file
 * Installation functions for tide_edit_protection.
 */

use Drupal\views\Entity\View;
use Drupal\user\Entity\Role;

/**
 * Updates locked_content view.
 */
function tide_edit_protection_install() {
  $view = View::load('locked_content');
  if ($view) {
    if ($view->status() == TRUE) {
      $view->setStatus(FALSE);
      $view->save();
    }
  }
  $contentLockSettings = \Drupal::configFactory()
    ->getEditable('content_lock.settings');
  $types = $contentLockSettings->get('types');
  $types['node'] = ['*' => '*'];
  $contentLockSettings->set('types', $types)->save();

  // Sets content_lock_timeout module.
  $contentTimeOutSettings = \Drupal::configFactory()
    ->getEditable('content_lock_timeout.settings');
  $contentTimeOutSettings->set('content_lock_timeout_minutes', '240');
  $contentTimeOutSettings->set('content_lock_timeout_on_edit', 1);
  $contentTimeOutSettings->save();
  // Changes content_lock weight.
  module_set_weight('content_lock', 1000);
}

/**
 * Enables content_lock_timeout module.
 */
function tide_edit_protection_update_8001() {
  if (!\Drupal::moduleHandler()
    ->moduleExists('content_lock_timeout')) {
    \Drupal::service('module_installer')->install(['content_lock_timeout']);
  }
  $contentTimeOutSettings = \Drupal::configFactory()
    ->getEditable('content_lock_timeout.settings');
  $contentTimeOutSettings->set('content_lock_timeout_minutes', '240');
  $contentTimeOutSettings->set('content_lock_timeout_on_edit', 1);
  $contentTimeOutSettings->save();
}

/**
 * Changes content_lock weight.
 */
function tide_edit_protection_update_8002() {
  module_set_weight('content_lock', 1000);
}

/**
 * Adds node site filter to lock_content view.
 */
function tide_edit_protection_update_8003() {
  if (!\Drupal::moduleHandler()->moduleExists('tide_site_restriction')) {
    return;
  }
  $site_filter =
    [
      'id' => 'field_node_site_target_id',
      'table' => 'node__field_node_site',
      'field' => 'field_node_site_target_id',
      'relationship' => 'none',
      'group_type' => 'group',
      'admin_label' => '',
      'operator' => 'or',
      'value' => [],
      'group' => 1,
      'exposed' => TRUE,
      'expose' =>
        [
          'operator_id' => 'field_node_site_target_id_op',
          'label' => 'Sites',
          'description' => '',
          'use_operator' => FALSE,
          'operator' => 'field_node_site_target_id_op',
          'operator_limit_selection' => FALSE,
          'operator_list' => [],
          'identifier' => 'field_node_site_target_id',
          'required' => FALSE,
          'remember' => FALSE,
          'multiple' => TRUE,
          'remember_roles' =>
            [
              'authenticated' => 'authenticated',
              'anonymous' => '0',
              'administrator' => '0',
              'approver' => '0',
              'site_admin' => '0',
              'editor' => '0',
              'previewer' => '0',
              'event_author' => '0',
              'grant_author' => '0',
            ],
          'reduce' => FALSE,
        ],
      'is_grouped' => FALSE,
      'group_info' =>
        [
          'label' => '',
          'description' => '',
          'identifier' => '',
          'optional' => TRUE,
          'widget' => 'select',
          'multiple' => FALSE,
          'remember' => FALSE,
          'default_group' => 'All',
          'default_group_multiple' => [],
          'group_items' => [],
        ],
      'reduce_duplicates' => FALSE,
      'type' => 'select',
      'limit' => TRUE,
      'vid' => 'sites',
      'hierarchy' => TRUE,
      'error_message' => TRUE,
      'plugin_id' => 'taxonomy_index_tid',
    ];

  $config = \Drupal::configFactory()
    ->getEditable('views.view.tide_locked_content')
    ->get('display');
  if (!isset($config['default']['display_options']['filters']['field_node_site_target_id'])) {
    $config['default']['display_options']['filters']['field_node_site_target_id'] = $site_filter;
    \Drupal::configFactory()
      ->getEditable('views.view.tide_locked_content')
      ->set('display', $config)
      ->save();
  }
}

/**
 * Assign `admin lock content view` permission to approvers.
 */
function tide_edit_protection_update_8004() {
  $approver = Role::load('approver');
  if ($approver) {
    $approver->grantPermission('admin lock content view');
    $approver->save();
  }
}

/**
 * Updates uid_current form label.
 */
function tide_edit_protection_update_8005() {
  $config = Drupal::configFactory()
    ->getEditable('views.view.tide_locked_content');
  $options = $config->get('display');
  if (isset($options['default']['display_options']['filters']['uid_current']['expose']['label'])) {
    $options['default']['display_options']['filters']['uid_current']['expose']['label'] = 'Is the user logged in right now?';
    $config->set('display', $options);
    $config->save();
  }
}
