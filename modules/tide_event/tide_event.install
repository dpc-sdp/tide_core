<?php

/**
 * @file
 * Install file.
 */

use Drupal\tide_event\TideEventOperation;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for Tide profile Profile.
 *
 * @see system_install()
 */
function tide_event_install() {
  // Don't do anything else during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  TideEventOperation::addFieldsToSearchApi();
  TideEventOperation::assignNecessaryPermissions(FALSE);
  TideEventOperation::enableNecessaryModules();
  TideEventOperation::addDefaultValueToContentCategory();
}

/**
 * Implements hook_update_dependencies().
 */
function tide_event_update_dependencies() {
  $dependencies = [];
  $dependencies['tide_event'][10001] = ['tide_core' => 10005];
  $dependencies['tide_event'][10002] = ['tide_core' => 10014];
  return $dependencies;
}

/**
 * Implements hook_uninstall().
 */
function tide_event_uninstall() {
  TideEventOperation::assignNecessaryPermissions(TRUE);
}

/**
 * Imports field.field.node.event.field_content_category for existing sites.
 */
function tide_event_update_10001() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_event') . '/config/install'];
  $config_read = _tide_read_config('field.field.node.event.field_content_category', $config_location, TRUE);
  $storage = \Drupal::entityTypeManager()->getStorage('field_config');
  $id = $storage->getIDFromConfigName('field.field.node.event.field_content_category', $storage->getEntityType()->getConfigPrefix());
  if ($storage->load($id) == NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/updates');
  _tide_core_field_content_category_default_value('event', 'Event');
  _tide_core_content_category_form_display('event');
}

/**
 * Adds custom filters field.
 */
function tide_event_update_10002() {
  $tideUpdateHelper = \Drupal::service('tide_core.entity_update_helper');
  $configs = [
    'node.event.field_custom_filters' => 'field_config',
    'node.event.default' => 'entity_form_display',
    'node.event.default' => 'entity_view_display',
    'node.event.teaser' => 'entity_view_display',
  ];
  foreach ($configs as $name => $type) {
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    if ($storage->load($name) !== NULL) {
      continue;
    }
    else {
      $tideUpdateHelper->import($type, $name);
    }
  }

  $display_repository = \Drupal::service('entity_display.repository');
  $display_repository->getFormDisplay('node', 'event')
    ->setComponent('field_custom_filters', [
      'type' => 'paragraphs',
      'settings' => [
        'title' => 'Custom filters',
        'title_plural' => 'Custom filter',
        'edit_mode' => 'closed',
        'closed_mode' => 'summary',
        'autocollapse' => 'none',
        'closed_mode_threshold' => 0,
        'add_mode' => 'modal',
        'form_display_mode' => 'default',
        'default_paragraph_type' => '_none',
        'default_paragraph_count' => 1,
        'features' => [
          'add_above' => '0',
          'collapse_edit_all' => 'collapse_edit_all',
          'duplicate' => '0',
        ],
      ],
    ])
    ->save();
}

/**
 * Remove outdated email handler from tide_event_submission webform.
 */
function tide_event_update_10003() {
  $webform_id = 'tide_event_submission';

  // Load the webform entity.
  $webform = \Drupal::entityTypeManager()
    ->getStorage('webform')
    ->load($webform_id);

  if (!$webform) {
    return \Drupal::translation()->translate('Webform @id not found.', ['@id' => $webform_id]);
  }

  // Get the handlers.
  $handlers = $webform->getHandlers();
  $updated = FALSE;

  // Go through each handler.
  foreach ($handlers as $handler_id => $handler) {
    if ($handler_id == 'event_submission_email') {
      $configuration = $handler->getConfiguration();

      // Check if this is an email handler with the specific to_mail address.
      if (isset($configuration['settings']['to_mail']) &&
        $configuration['settings']['to_mail'] === 'contact.dpc@dsdbi.desk-mail.com') {
        // Delete this handler.
        $webform->deleteWebformHandler($handler);
        $updated = TRUE;
      }
    }
  }

  if ($updated) {
    // Save the updated webform.
    $webform->save();
    return \Drupal::translation()->translate(
      'Removed outdated email handler from @webform webform.',
      ['@webform' => $webform_id]
    );
  }

  return \Drupal::translation()->translate(
    'No handlers with the specified email address were found in @webform webform.',
    ['@webform' => $webform_id]
  );
}

/**
 * Add corner graphic fields.
 */
function tide_event_update_10004() {
  $configs = [
    'field.field.node.event.field_bottom_graphical_image' => 'field_config',
    'field.field.node.event.field_graphical_image' => 'field_config',
  ];
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_event') . '/config/install'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = $storage->getIDFromConfigName($config, $storage->getEntityType()->getConfigPrefix());
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }

  // Load the form display entity.
  $form_display_id = 'node.event.default';
  $form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load($form_display_id);

  if (!$form_display) {
    return;
  }

  // Common settings for Entity Browser widget.
  $widget_base = [
    'type' => 'entity_browser_entity_reference',
    'region' => 'content',
    'settings' => [
      'entity_browser' => 'tide_image_browser',
      'field_widget_display' => 'rendered_entity',
      'field_widget_edit' => TRUE,
      'field_widget_remove' => TRUE,
      'field_widget_replace' => FALSE,
      'open' => TRUE,
      'field_widget_display_settings' => [
        'view_mode' => 'media_browser_preview',
      ],
      'selection_mode' => 'selection_append',
    ],
    'third_party_settings' => [],
    'visible' => TRUE,
    'group' => 'group_customised_header',
  ];

  // Apply individual weights and set component config.
  $fields = [
    'field_graphical_image' => 18,
    'field_bottom_graphical_image' => 19,
  ];

  foreach ($fields as $field => $weight) {
    $component = $widget_base;
    $component['weight'] = $weight;
    $form_display->setComponent($field, $component);
  }

  // Define the field group using field_group's third-party settings.
  $form_display->setThirdPartySetting('field_group', 'group_customised_header', [
    'children' => [
      'field_graphical_image',
      'field_bottom_graphical_image',
    ],
    'label' => 'Customised Header',
    'region' => 'content',
    'parent_name' => 'group_section_1',
    'weight' => 9,
    'format_type' => 'tab',
    'format_settings' => [
      'classes' => '',
      'show_empty_fields' => FALSE,
      'id' => '',
      'label_as_html' => FALSE,
      'formatter' => 'closed',
      'description' => '',
      'required_fields' => TRUE,
    ],
  ]);

  $form_display->save();
}

/**
 * Tag relocation - Update event form display.
 */
function tide_event_update_10005() {
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
  $entity_form_display = Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.event.default');
  $field_group = $entity_form_display->getThirdPartySettings('field_group');
  if (!empty($field_group)){
    $key = array_search('group_body_content', $field_group['group_section_1']['children']);
    if ($key !== FALSE) {
      unset($field_group['group_section_1']['children'][$key]);
    }
    $key = array_search('group_event_author', $field_group['group_section_1']['children']);
    if ($key !== FALSE) {
      unset($field_group['group_section_1']['children'][$key]);
    }
    $key = in_array('group_customised_header', $field_group['group_section_1']['children']);
    if ($key === FALSE) {
      $field_group['group_section_1']['children'][] = 'group_customised_header';
    }
    $field_group['group_section_1']['children'] = array_values($field_group['group_section_1']['children']);
    $key = array_search('field_featured_image', $field_group['group_page_header']['children']);
    if ($key !== FALSE) {
      unset($field_group['group_page_header']['children'][$key]);
    }
    $field_group['group_page_header']['children'] = array_values($field_group['group_page_header']['children']);
    $entity_form_display->setThirdPartySetting('field_group', 'group_page_header', $field_group['group_page_header']);
    $entity_form_display->setThirdPartySetting('field_group', 'group_section_1', $field_group['group_section_1']);
    if (isset($field_group['group_right_column'])){
      unset($field_group['group_right_column']);
      $field_group['group_sidebar'] = [
        'children' => [
          'group_related_links',
          'group_contact',
          'field_show_social_sharing',
        ],
        'label' => 'Sidebar',
        'region' => 'content',
        'parent_name' => 'group_sidebar_section',
        'weight' => 20,
        'format_type' => 'tab',
        'format_settings' => [
          'classes' => '',
          'show_empty_fields' => FALSE,
          'id' => '',
          'label_as_html' => FALSE,
          'formatter' => 'closed',
          'description' => '',
          'required_fields' => TRUE,
        ],
      ];
      $entity_form_display->setThirdPartySetting('field_group', 'group_sidebar', $field_group['group_sidebar']);
      $field_group['group_sidebar_section'] = [
        'children' => [
          'group_sidebar',
        ],
        'label' => 'Sidebar Section',
        'region' => 'content',
        'parent_name' => '',
        'weight' => $entity_form_display->getComponent('field_featured_image')['weight'] + 2,
        'format_type' => 'tabs',
        'format_settings' => [
          'classes' => '',
          'show_empty_fields' => FALSE,
          'id' => '',
          'label_as_html' => FALSE,
          'direction' => 'horizontal',
          'width_breakpoint' => 640,
        ],
      ];
      $entity_form_display->setThirdPartySetting('field_group', 'group_sidebar_section', $field_group['group_sidebar_section']);
      $field_group['group_content_section'] = [
        'children' => [
          'group_body_content',
          'group_event_author',
        ],
        'label' => 'Content section',
        'region' => 'content',
        'parent_name' => '',
        'weight' => $entity_form_display->getComponent('field_featured_image')['weight'] + 1,
        'format_type' => 'tabs',
        'format_settings' => [
          'classes' => '',
          'show_empty_fields' => FALSE,
          'id' => '',
          'label_as_html' => FALSE,
          'direction' => 'horizontal',
          'width_breakpoint' => 640,
        ],
      ];
      $entity_form_display->setThirdPartySetting('field_group', 'group_content_section', $field_group['group_content_section']);
      $field_group['group_event_author']['parent_name'] = 'group_content_section';
      $entity_form_display->setThirdPartySetting('field_group', 'group_event_author', $field_group['group_event_author']);
      $field_group['group_body_content']['parent_name'] = 'group_content_section';
      $field_group['group_body_content']['label'] = 'Page Content';
      $entity_form_display->setThirdPartySetting('field_group', 'group_body_content', $field_group['group_body_content']);
      $field_group['group_contact']['parent_name'] = 'group_sidebar';
      $entity_form_display->setThirdPartySetting('field_group', 'group_contact', $field_group['group_contact']);
      $field_group['group_related_links']['parent_name'] = 'group_sidebar';
      $entity_form_display->setThirdPartySetting('field_group', 'group_related_links', $field_group['group_related_links']);
      $field_group['group_tags_and_metadata']['weight'] = 21;
      $entity_form_display->setThirdPartySetting('field_group', 'group_tags_and_metadata', $field_group['group_tags_and_metadata']);
      if ($field_show_content_rating_settings = $entity_form_display->getComponent('field_show_content_rating')) {
        $field_show_content_rating_settings['weight'] = 22;
        $entity_form_display->setComponent('field_show_content_rating', $field_show_content_rating_settings);
      }
      if ($field_field_custom_filters_settings = $entity_form_display->getComponent('field_custom_filters')) {
        $field_field_custom_filters_settings['weight'] = 23;
        $entity_form_display->setComponent('field_custom_filters', $field_field_custom_filters_settings);
      }
      $entity_form_display->save();
    }
  }
}
