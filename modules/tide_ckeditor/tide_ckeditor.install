<?php

/**
 * @file
 * Install file for tide_ckeditor.
 */

use Drupal\user\Entity\Role;

/**
 * Install the tide_ckeditor module.
 */
function tide_ckeditor_install() {
  $role_ids = ['editor', 'approver', 'site_admin', 'contributor'];
  foreach ($role_ids as $role_id) {
    $role = Role::load($role_id);
    if ($role) {
      $role->grantPermission('use ckeditor5 embedded content')->save();
    }
  }
}

/**
 * Assign `use text format advanced` to editor,approver and site_admin.
 */
function tide_ckeditor_update_10001() {
  $role_ids = ['editor', 'approver', 'site_admin', 'contributor'];
  foreach ($role_ids as $role_id) {
    $role = Role::load($role_id);
    if ($role) {
      $role->grantPermission('use ckeditor5 embedded content')->save();
    }
  }
}

/**
 * Update `rich text format` to use new filter for allowing table col styles.
 */
function tide_ckeditor_update_10002() {
  if (\Drupal::moduleHandler()->moduleExists('ckeditor_tablecol_resize') === FALSE) {
    \Drupal::service('module_installer')->install(['ckeditor_tablecol_resize']);
  }
  // Import table col style filter in rich text format.
  $config_factory = \Drupal::configFactory();
  $filter = $config_factory->getEditable('filter.format.rich_text');
  $allowed_html = $filter->get('filters.filter_html.settings.allowed_html');
  if ($filter) {
    // Add <colgroup>, <col>, and <col style> to allowed HTML.
    $additional_allowed_tags = '<colgroup> <col> <col style>';
    // Append the new tags to the allowed HTML,
    // making sure not to add duplicates.
    $replaced = $allowed_html . ' ' . $additional_allowed_tags;
    $replaced = trim($replaced, ',');
    // Set the updated allowed HTML tags in the filter.
    $filter->set('filters.filter_html.settings.allowed_html', $replaced);

    $filter->set('filters.filter_resize_tablecolumns', [
      'id' => 'filter_resize_tablecolumns',
      'provider' => 'ckeditor_tablecol_resize',
      'status' => TRUE,
      'weight' => 99,
      'settings' => [],
    ]);
    $filter->save();
  }
}

/**
 * Restrict user to only use left and right text alignment control in WYSIWYG.
 */
function tide_ckeditor_update_10003() {
  $editor_types = ['rich_text', 'summary_text', 'admin_text'];

  // Loop through each editor type to update its configuration.
  foreach ($editor_types as $editor_type) {

    // Get the editable configuration for the current editor type.
    $editor_config = \Drupal::configFactory()->getEditable("editor.editor.$editor_type");
    $settings = $editor_config->get('settings');

    // Check if the 'enabled_alignments' key exists and update it.
    if (isset($settings['plugins']['ckeditor5_alignment']['enabled_alignments'])) {
      $settings['plugins']['ckeditor5_alignment']['enabled_alignments'] = ['left', 'right'];
    }

    $editor_config->set('settings', $settings)->save();
  }
}

/**
 * Update `rich text format` to allow figure and figcaption.
 */
function tide_ckeditor_update_10004() {
  $config_factory = \Drupal::configFactory();
  $filter = $config_factory->getEditable('filter.format.rich_text');

  // Add <figure> <figcaption> to the filters list of allowed HTML tags.
  if ($filter) {
    $allowed_html = $filter->get('filters.filter_html.settings.allowed_html');
    $additional_allowed_tags = '<figure class> <figcaption>';
    $updated_allowed_tags = trim($allowed_html . ' ' . $additional_allowed_tags, ',');
    $filter->set('filters.filter_html.settings.allowed_html', $updated_allowed_tags);
    $filter->save();
  }
}

/**
 * Update `allowed_tags` for `rich_text` editor.
 */
function tide_ckeditor_update_10005() {
  $editor_config = \Drupal::configFactory()->getEditable(
    "editor.editor.rich_text",
  );

  // Unset list styles.
  $key = "settings.plugins.ckeditor5_list.properties";
  $list_props = $editor_config->get($key);
  if ($list_props && isset($list_props["styles"])) {
    unset($list_props["styles"]);
    $editor_config->set($key, $list_props)->save();
  }

  // Update allowed_tags.
  $key = "settings.plugins.ckeditor5_sourceEditing.allowed_tags";
  $allowed_tags = $editor_config->get($key);

  if ($allowed_tags) {
    // Replace <span class> with <span>.
    $allowed_tags = str_replace("<span class>", "<span>", $allowed_tags);
    // Replace <ul class> with <ul>.
    $allowed_tags = str_replace("<ul class>", "<ul>", $allowed_tags);
    // Replace <ol class> with <ol type>.
    $allowed_tags = str_replace("<ol class>", "<ol type>", $allowed_tags);
    // Replace <blockquote cite class> with <blockquote cite>.
    $allowed_tags = str_replace(
      "<blockquote cite class>",
      "<blockquote cite>",
      $allowed_tags,
    );

    // Replace <div class> with whitelist of classes.
    $allowed_tags = str_replace(
      "<div class>",
      '<div class="quotation button button--secondary">',
      $allowed_tags,
    );

    // Remove <drupal-entity> unnecessary attributes (not needed in editor).
    $allowed_tags = str_replace(
      "<drupal-entity data-caption data-align data-entity-type data-entity-uuid data-embed-button data-entity-embed-display data-entity-embed-display-settings data-show-last-updated title alt>",
      "<drupal-entity data-entity-type data-embed-button data-show-last-updated>",
      $allowed_tags,
    );
    // Remove <a> unnecessary attributes (not needed in editor).
    $allowed_tags = str_replace(
      "<a hreflang target data-entity-substitution data-entity-type data-entity-uuid>",
      "<a hreflang target>",
      $allowed_tags,
    );

    $editor_config->set($key, $allowed_tags)->save();
  }
}
