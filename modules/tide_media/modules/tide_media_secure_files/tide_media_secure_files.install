<?php

/**
 * @file
 * Tide Media Secure Files.
 */

use Drupal\user\Entity\Role;

/**
 * Implements hook_uninstall().
 */
function tide_media_secure_files_uninstall() {
  \Drupal::configFactory()->getEditable('pfdp.pfdp_directory.secure')->delete();

  $secure_file_media_type = 'secure_file';
  $ids = \Drupal::entityQuery('media')
    ->condition('bundle', $secure_file_media_type)
    ->accessCheck(FALSE)
    ->execute();
  $storageHandler = \Drupal::entityTypeManager()->getStorage('media');
  $entities = $storageHandler->loadMultiple($ids);
  if ($entities) {
    foreach ($entities as $entity) {
      $entity->delete();
    }
  }

  $media_type = \Drupal::entityTypeManager()
    ->getStorage('media_type')
    ->load($secure_file_media_type);
  if ($media_type) {
    $media_type->delete();
  }

  $secure_file_user_role = 'secure_file_user';
  $secure_file_users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['roles' => 'secure_file_user']);
  if ($secure_file_users) {
    foreach ($secure_file_users as $user) {
      $user->removeRole($secure_file_user_role);
      $user->save();
    }
  }

  $role = Role::load($secure_file_user_role);
  if ($role) {
    $role->delete();
  }

  drupal_flush_all_caches();

  \Drupal::service('module_installer')->uninstall(['pfdp']);
}

/**
 * Adds a secure file widget to entity browser.
 */
function _create_secure_file_widget() {
  if (\Drupal::moduleHandler()->moduleExists('entity_browser')) {
    $uuid = \Drupal::service('uuid')->generate();
    $secure_file_widget = [
      'id' => 'entity_form',
      'uuid' => $uuid,
      'label' => 'Add secure file',
      'weight' => 6,
      'settings' => [
        'submit_text' => 'Save secure file',
        'entity_type' => 'media',
        'bundle' => 'secure_file',
        'form_mode' => 'default',
      ],
    ];

    $config = \Drupal::configFactory()->getEditable('entity_browser.browser.tide_media_browser_iframe');
    $widgets = $config->get('widgets');
    if (!is_array($widgets)) {
      $widgets = [];
    }
    if (!in_array($secure_file_widget, $widgets)) {
      $widgets[$uuid] = $secure_file_widget;
      $config->set('widgets', $widgets);
      $config->save();
    }
  }
}

/**
 * Implements hook_install().
 */
function tide_media_secure_files_install() {
  if (!\Drupal::moduleHandler()->moduleExists('pfdp')) {
    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['pfdp']);
  }
  // Add 'view field_secure_file' permission.
  // To the 'anonymous' and 'authenticated' roles.
  $roles = ['anonymous', 'authenticated'];

  foreach ($roles as $role_name) {
    $role = Role::load($role_name);
    if ($role) {
      user_role_grant_permissions($role->id(), ['view field_secure_file']);
    }
  }

  _create_secure_file_widget();
}

/**
 * Adds secure file widget to entity browser.
 */
function tide_media_secure_files_update_10001() {
  _create_secure_file_widget();
}

/**
 * Update views.view.media and views.view.tide_media_browser.
 */
function tide_media_secure_files_update_10002() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');

  // Define config paths for optional and install locations.
  $config_optional_location = \Drupal::service('extension.list.module')->getPath('tide_core') . '/config/optional';
  $config_install_location = \Drupal::service('extension.list.module')->getPath('tide_core') . '/config/install';

  // Get the config storage for views.
  $storage = \Drupal::entityTypeManager()->getStorage('view');

  $yaml = \Drupal::service('serialization.yaml');
  if ($yaml === NULL) {
    \Drupal::logger('tide_media_secure_files')->error('YAML service is not available.');
    return;
  }
  // Handle 'views.view.media' (Optional).
  $config_entity_optional = $storage->load('media');
  if ($config_entity_optional) {
    $yaml_file_path_optional = $config_optional_location . '/views.view.media.yml';
    if (file_exists($yaml_file_path_optional)) {
      $yaml_data_optional = $yaml->decode(file_get_contents($yaml_file_path_optional));
      if (is_array($yaml_data_optional)) {
        $config_entity_optional->set('display', $yaml_data_optional['display']);
        $config_entity_optional->save();
        \Drupal::logger('tide_media_secure_files')->notice('Updated views.view.media configuration.');
      }
    }
    else {
      \Drupal::logger('tide_media_secure_files')->error('YAML data for views.view.media is not valid.');
    }
  }
  else {
    \Drupal::logger('tide_media_secure_files')->error('YAML file does not exist.');
  }

  // Handle 'views.view.tide_media_browser' (Install).
  $config_entity_install = $storage->load('tide_media_browser');
  if ($config_entity_install) {
    $yaml_file_path_install = $config_install_location . '/views.view.tide_media_browser.yml';
    if (file_exists($yaml_file_path_install)) {
      $yaml_data_install = $yaml->decode(file_get_contents($yaml_file_path_install));
      if (is_array($yaml_data_install)) {
        $config_entity_install->set('display', $yaml_data_install['display']);
        $config_entity_install->save();
        \Drupal::logger('tide_media_secure_files')->notice('Updated views.view.tide_media_browser configuration.');
      }
    }
    else {
      \Drupal::logger('tide_media_secure_files')->error('YAML data for views.view.tide_media_browser is not valid.');
    }
  }
  else {
    \Drupal::logger('tide_media_secure_files')->error('YAML file does not exist.');
  }
}
