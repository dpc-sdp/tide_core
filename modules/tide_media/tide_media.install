<?php

/**
 * @file
 * Tide Media install.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\tide_media\TideOperation;

/**
 * Implements hook_install().
 */
function tide_media_install() {
  TideOperation::enableStandaloneMedia();
  TideOperation::entityUsageDefaultSettings();
  TideOperation::assignNecessaryPermissions();
  TideOperation::createLicenseTypeTerms();
  TideOperation::addMediaTypePermissions();

}

/**
 * Updates to have department field required.
 */
function tide_media_update_10001() {
  $entity_type = 'media';
  $media_bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo($entity_type);
  $bundles = [
    'audio',
    'document',
    'embedded_video',
    'file',
    'image',
  ];
  if (!empty($media_bundles) && is_array($media_bundles)) {
    foreach ($media_bundles as $name => $bundle) {
      if (in_array($name, $bundles)) {
        $field = FieldConfig::loadByName($entity_type, $name, 'field_media_department');
        if (!empty($field)) {
          $field->setRequired(TRUE);
          $field->save();
        }
      }
    }
  }
}

/**
 * Creates terms for license_type vocabulary for installed site.
 */
function tide_media_update_10002() {
  TideOperation::createLicenseTypeTerms();
}

/**
 * Remove the png icon.
 */
function tide_media_update_10003() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('embed.button.tide_media');
  $config->set('icon', [])->save();
}

/**
 * Update media permissions.
 */
function tide_media_update_10004() {
  TideOperation::addMediaTypePermissions();
}

/**
 * Adds paragraphs_library_item to track_enabled_target_entity_types.
 */
function tide_media_update_10005() {
  // Update entity_usage.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('entity_usage.settings');
  $result = $config->get('track_enabled_target_entity_types');
  array_push($result, 'paragraphs_library_item');
  $config->set('track_enabled_target_entity_types', $result);
  $config->save();
}

/**
 * Adds media_alias_display settings for document type.
 */
function tide_media_update_10006() {
  // Check if the media_library module is enabled, enable it.
  if (\Drupal::moduleHandler()->moduleExists('media_library') === FALSE) {
    \Drupal::service('module_installer')->install(['media_library']);
  }

  if (\Drupal::moduleHandler()->moduleExists('media_alias_display') === FALSE) {
    \Drupal::service('module_installer')->install(['media_alias_display']);
  }

  $media_config = \Drupal::service('config.factory')->getEditable('media_alias_display.settings');
  if ($media_config) {
    $media_config->set('media_bundles', ['document' => 'document']);
    $media_config->save();
  }
}

/**
 * Update views.view.media and views.view.tide_media_browser.
 */
function tide_media_update_10007() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');

  // Define the config locations for both views.
  $config_optional_location = [\Drupal::service('extension.list.module')->getPath('tide_media') . '/config/optional'];
  $config_install_location = [\Drupal::service('extension.list.module')->getPath('tide_media') . '/config/install'];

  // Load the storage for views.
  $storage = \Drupal::entityTypeManager()->getStorage('view');

  // Handle the view located in config/optional (e.g., 'views.view.media').
  $config_entity_optional = $storage->load('media');
  if ($config_entity_optional !== NULL) {
    $storage->delete([$config_entity_optional]);
  }

  $config_read_optional = _tide_read_config('views.view.media', $config_optional_location, FALSE);
  $new_config_entity_optional = $storage->createFromStorageRecord($config_read_optional);
  $new_config_entity_optional->save();

  $config_entity_install = $storage->load('views.view.tide_media_browser');
  if ($config_entity_install !== NULL) {
    $storage->delete([$config_entity_install]);
  }

  $config_read_install = _tide_read_config('views.view.another_media', $config_install_location, FALSE);
  $new_config_entity_install = $storage->createFromStorageRecord($config_read_install);
  $new_config_entity_install->save();
}

