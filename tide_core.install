<?php

/**
 * @file
 * Installation functions for Tide Core.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\tide_core\TideCoreOperation;
use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drush\Drush;

/**
 * Implements hook_install().
 */
function tide_core_install() {
  // Don't do anything else during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  // Restrict user registration to admin role creation.
  \Drupal::configFactory()
    ->getEditable('user.settings')
    ->set('register', UserInterface::REGISTER_ADMINISTRATORS_ONLY)
    ->save(TRUE);

  $tideCoreOperation = new TideCoreOperation();
  // Creates terms for Topic vocabulary.
  $tideCoreOperation->createTopicTermsVocabulary();

  // Creates terms for content_category vocabulary.
  $tideCoreOperation->addContentCategoryVocabulary();

  // Update default Editorial workflow of Content Moderation.
  $tideCoreOperation->updateEditorialWorkflow();

  // Update authenticated user permission.
  $tideCoreOperation->updateAuthenticatedUserPermission();

  // Deletes unsupported actions from /admin/contents view.
  $tideCoreOperation->deleteUnsupportedActions();

  // Add business contact fields to user account form display.
  $tideCoreOperation->addBusinessFieldsToUserAccountForm();

  // Use custom files view and disable the default one.
  $tideCoreOperation->useCustomFilesView();

  // Changes the diff modules general_settings.revision_pager_limit to 16.
  $tideCoreOperation->changeDiffSettings();

  // Enable Tide TFA.
  $tideCoreOperation->enabledTideTfa();

  // Enables paragraphs_library.
  $tideCoreOperation->alterParagraphsLibrary();
}

/**
 * Implements hook_update_dependencies().
 */
function tide_core_update_dependencies() {
  $dependencies = [];
  $dependencies['tide_core'][10007] = ['bay_platform_dependencies' => 10003];

  return $dependencies;
}

/**
 * Increase character limit of URLs.
 */
function tide_core_update_10000() {
  $config = \Drupal::configFactory()->getEditable('pathauto.settings');
  $config->set('max_length', 255);
  $config->save();
}

/**
 * Revokes `delete any media` and `delete media` from the editor role.
 */
function tide_core_update_10001() {
  $editor = Role::load('editor');
  if (!$editor) {
    return;
  }
  $permissionsToRemove = ['delete any media', 'delete media'];
  $changed = FALSE;
  foreach ($permissionsToRemove as $permission) {
    if ($editor->hasPermission($permission)) {
      $editor->revokePermission($permission);
      $changed = TRUE;
    }
  }
  if ($changed) {
    $editor->save();
  }
}

/**
 * Grants approver role with `tide node bulk update` permission.
 */
function tide_core_update_10002() {
  $approver = Role::load('approver');
  $approver->grantPermission('tide node bulk update');
  $approver->save();
}

/**
 * Add description field to accordion.
 */
function tide_core_update_10003() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $configs = [
    'field.field.paragraph.accordion.field_paragraph_body' => 'field_config',
  ];
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_core') . '/config/install'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $temp = substr($config, strpos($config, '.') + 1);
    $id = substr($temp, strpos($config, '.') + 1);
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }

  $form_configs = [
    'core.entity_form_display.paragraph.accordion.default',
    'core.entity_view_display.paragraph.accordion.default',
    'core.entity_view_display.paragraph.accordion.preview',
  ];
  foreach ($form_configs as $form_config) {
    $config = \Drupal::configFactory()->getEditable($form_config);
    $config_read = _tide_read_config($form_config, $config_location, FALSE);
    $config->set('dependencies', $config_read['dependencies']);
    $config->set('content', $config_read['content']);
    $config->set('hidden', $config_read['hidden']);
    $config->save();
  }
}

/**
 * Approver should not have access to administer taxonomy.
 */
function tide_core_update_10004() {
  $role = 'approver';
  $permissions = [
    'administer taxonomy',
    'edit terms in topic',
    'delete terms in topic',
  ];
  if ($role) {
    user_role_revoke_permissions($role, $permissions);
  }
}

/**
 * Run _add_default_content_category_taxonomy().
 */
function tide_core_update_10005() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_core') . '/config/install'];
  $config_read = _tide_read_config('field.storage.node.field_content_category', $config_location, TRUE);
  $storage = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  if ($storage->load('node.field_content_category') === NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
  if (\Drupal::moduleHandler()->moduleExists('term_reference_tree') === FALSE) {
    \Drupal::service('module_installer')->install(['term_reference_tree']);
  }
  $config_read = _tide_read_config('taxonomy.vocabulary.content_category', $config_location, TRUE);
  $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary');
  if ($storage->load('content_category') === NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
  $vocabulary_details = [
    'vid' => 'content_category',
    'description' => 'Categories assigned to all content to assist with filtering in content collection and search',
    'name' => 'Content category',
  ];
  _tide_core_adding_default_taxonomy(_content_category_terms(), $vocabulary_details);
}

/**
 * Fixes dialog can no longer use custom data- attributes in CKEditor 5.
 */
function tide_core_update_10006() {
  $config_factory = \Drupal::configFactory();
  $filter_ids = [
    'filter.format.admin_text',
    'filter.format.rich_text',
    'filter.format.summary_text',
  ];
  foreach ($filter_ids as $filter_id) {
    $filter = $config_factory->getEditable($filter_id);
    $value = $filter->get('filters.filter_html.settings.allowed_html');
    if ($value) {
      $replaced = str_replace('<drupal-entity data-*', '<drupal-entity data-caption data-align data-entity-uuid data-embed-button data-entity-embed-display data-entity-embed-display-settings data-show-last-updated', $value);
      $filter->set('filters.filter_html.settings.allowed_html', $replaced);
      $filter->save();
    }
  }

  $configs = [
    'editor.editor.admin_text',
    'editor.editor.rich_text',
    'editor.editor.summary_text',
  ];
  foreach ($configs as $config) {
    $editable_config = $config_factory->getEditable($config);
    $rows = $editable_config->get('settings.plugins.ckeditor5_sourceEditing.allowed_tags');
    if ($rows) {
      $replaced_value = _tide_core_replace_attribute_in_tag($rows, 'drupal-entity', 'data-*', 'data-caption data-align data-entity-type data-entity-uuid data-embed-button data-entity-embed-display data-entity-embed-display-settings data-show-last-updated');
      $editable_config->set('settings.plugins.ckeditor5_sourceEditing.allowed_tags', $replaced_value);
      $editable_config->save();
    }
  }
}

/**
 * Replaces a specified attribute within a given tag in an array of strings.
 */
function _tide_core_replace_attribute_in_tag($array, $tagName, $attribute, $newAttributeString) {
  foreach ($array as $key => $value) {
    if (strpos($value, "<" . $tagName) !== FALSE) {
      $pattern = '/' . preg_quote($attribute, '/') . '/';
      $array[$key] = preg_replace($pattern, $newAttributeString, $value);
    }
  }
  return $array;
}

/**
 * Installs tide_times sensor.
 */
function tide_core_update_10007() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_core') . '/config/install'];
  $config_read = _tide_read_config('monitoring.sensor_config.tide_times', $config_location, TRUE);
  $storage = \Drupal::entityTypeManager()->getStorage('monitoring_sensor_config');
  $id = $storage->getIDFromConfigName('monitoring.sensor_config.tide_times', $storage->getEntityType()->getConfigPrefix());
  if ($storage->load($id) == NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
}

/**
 * Enables paragraphs_library.
 */
function tide_core_update_10009() {
  // Enabled paragraphs_library module.
  if (!\Drupal::moduleHandler()->moduleExists('paragraphs_library')) {
    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['paragraphs_library']);
  }

  // Import extra fields.
  $config_update_items = [
    'paragraphs_library_item.field_department' => 'field_storage_config',
    'paragraphs_library_item.field_site' => 'field_storage_config',
    'paragraphs_library_item.paragraphs_library_item.field_department' => 'field_config',
    'paragraphs_library_item.paragraphs_library_item.field_site' => 'field_config',
  ];
  /** @var \Drupal\config_update\ConfigReverter $config_update */
  $config_update = \Drupal::service('config_update.config_update');
  foreach ($config_update_items as $name => $type) {
    $config_update->import($type, $name);
  }

  $tideCoreOperation = new TideCoreOperation();
  $tideCoreOperation->alterParagraphsLibrary();

  // Update permissions.
  $roles = [
    'approver',
    'contributor',
    'editor',
    'site_admin',
  ];
  $permissions = [
    'access paragraphs_library_items entity browser pages',
    'create paragraph library item',
    'edit paragraph library item',
  ];
  foreach ($roles as $role_name) {
    $role = Role::load($role_name);
    if ($role) {
      foreach ($permissions as $permission) {
        $role->grantPermission($permission);
      }
      $role->save();
    }
  }
}

/**
 * Enable tide_tfa.
 */
function tide_core_update_10010() {
  // Enabled tide_tfa module.
  if (!\Drupal::moduleHandler()->moduleExists('tide_tfa')) {
    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['tide_tfa']);
  }
}

/**
 * Enabled tide_data_driven_component module.
 */
function tide_core_update_10011() {
  $moduleHandler = \Drupal::service('module_handler');
  $moduleInstaller = \Drupal::service('module_installer');
  // Enable tide_data_driven_component.
  if (!$moduleHandler->moduleExists('tide_data_driven_component')) {
    $moduleInstaller->install(['tide_data_driven_component']);
  }
  if ($moduleHandler->moduleExists('tide_landing_page')) {
    // Define the fields to be updated.
    $fields_to_update = [
      'field_landing_page_component',
      'field_landing_page_header',
    ];
    $new_component = 'data_driven_component';

    foreach ($fields_to_update as $field_name) {
      $field_config = FieldConfig::loadByName('node', 'landing_page', $field_name);

      if ($field_config) {
        // Get the current handler settings.
        $handler_settings = $field_config->getSetting('handler_settings');

        // Ensure 'target_bundles' exists in handler settings.
        if (isset($handler_settings['target_bundles'])) {
          // Add the new component if it does not already exist.
          if (!array_key_exists($new_component, $handler_settings['target_bundles'])) {
            $handler_settings['target_bundles'][$new_component] = $new_component;

            // Update the field configuration with the new handler settings.
            $field_config->setSetting('handler_settings', $handler_settings);
            $field_config->save();
          }
        }
      }
    }
  }
}

/**
 * Enable shield module.
 */
function tide_core_update_10012() {
  // Check if the shield module is disabled, enable it.
  if (\Drupal::moduleHandler()->moduleExists('shield') === FALSE) {
    \Drupal::service('module_installer')->install(['shield']);
  }
  // Add the new paths to exclude.
  $exclude_paths = [
    '/oauth',
    '/oauth/authorize',
    '/oauth/token',
    '/sites/default/files/*',
  ];
  $paths_string = implode("\r\n", $exclude_paths);
  $shield_config = \Drupal::configFactory()->getEditable('shield.settings');
  $shield_config->set('paths', $paths_string)->save();
}

/**
 * Installs tide_smtp sensor.
 */
function tide_core_update_10013() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_core') . '/config/install'];
  $config_read = _tide_read_config('monitoring.sensor_config.tide_smtp', $config_location, TRUE);
  $storage = \Drupal::entityTypeManager()->getStorage('monitoring_sensor_config');
  $id = $storage->getIDFromConfigName('monitoring.sensor_config.tide_smtp', $storage->getEntityType()->getConfigPrefix());
  if ($storage->load($id) == NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
}

/**
 * Add custom filters field storage.
 */
function tide_core_update_10014() {
  $tideUpdateHelper = \Drupal::service('tide_core.entity_update_helper');
  $config_name = 'node.field_custom_filters';
  $config_type = 'field_storage_config';

  $storage = \Drupal::entityTypeManager()->getStorage($config_type);
  if ($storage->load($config_name) === NULL) {
    $tideUpdateHelper->import($config_type, $config_name);
  }
}

/**
 * Update user mail templates.
 */
function tide_core_update_10015() {
  $config = \Drupal::configFactory()->getEditable('user.mail');
  $config->set('password_reset.subject', 'Your Single Digital Presence password reset for [user:display-name] at [site:name]');
  $config->set('password_reset.body', "[user:display-name], \r\n\r\nYou requested to have your password reset for [site:name]. \r\n\r\nClick this link to log in (or copy and paste into your browser): \r\n\r\n[user:one-time-login-url] \r\n\r\nThis link can only be used once. It will lead you to a page where you can set a new password. This link will expire after 24 hours.  \r\n\r\nFrom the [site:name] team");
  $config->set('register_admin_created.subject', 'Your Single Digital Presence CMS account has been created');
  $config->set('register_admin_created.body', "[user:display-name], \r\n\r\nYour Single Digital Presence content management system (CMS) account has been created for [site:name]. \r\n\r\nYou may now log in by clicking this link or copying and pasting it into your browser: \r\n\r\n[user:one-time-login-url] \r\n\r\nYou can only use this link once. It will take you to a page where you set your password.\r\n\r\nAfter setting your password, you will be able to log in at [site:login-url] in the future using the username: [user:name] \r\n\r\nFrom the [site:name] team");

  // Save the configuration.
  $config->save();
}

/**
 * Create approver_plus role from config.
 */
function tide_core_update_10016() {
  // Load helper to read config file.
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_core') . '/config/install'];

  // Load approver_plus role config.
  $config_read = _tide_read_config('user.role.approver_plus', $config_location, FALSE);
  $new_permissions = $config_read['permissions'];
  $weight = $config_read['weight'];

  // Get same level of permissions from approver.
  $config = \Drupal::configFactory()->getEditable('user.role.approver');
  $same_level_permissions = $config->get('permissions');

  // Merge and remove duplicates.
  $merged_permissions = array_unique(array_merge($new_permissions, $same_level_permissions));

  // Create approver_plus role if it doesn't exist.
  if (!Role::load('approver_plus')) {
    $role = Role::create([
      'id' => 'approver_plus',
      'label' => 'Approver+',
    ]);
    $role->setWeight($weight);
    $role->save();
  }

  // Apply permissions.
  $permission_service = \Drupal::service('user.permissions');
  $all_permissions = $permission_service->getPermissions();
  $existing_permission_keys = array_keys($all_permissions);
  $approver_plus_role = Role::load('approver_plus');
  // Add the extra permission.
  $additional_permissions = [
    'administer site restriction',
    'add scheduled transitions node alert',
    'clone alert content',
    'create alert content',
    'delete alert revisions',
    'delete any alert content',
    'delete own alert content',
    'edit any alert content',
    'edit own alert content',
    'reschedule scheduled transitions node alert',
    'revert alert revisions',
    'view alert revisions',
    'view scheduled transitions node alert',
  ];
  // Merge and remove duplicates.
  $merged_permissions = array_unique(array_merge($merged_permissions, $additional_permissions));

  foreach ($merged_permissions as $permission) {
    if (in_array($permission, $existing_permission_keys, TRUE)) {
      if (!$approver_plus_role->hasPermission($permission)) {
        $approver_plus_role->grantPermission($permission);
      }
    }
  }
  $approver_plus_role->save();

  // Update administrator role weight.
  if ($admin_role = Role::load('administrator')) {
    $admin_role->setWeight(-11);
    $admin_role->save();
  }

  // This module defines access user creation page permission .
  if (\Drupal::moduleHandler()->moduleExists('tide_ui_restriction') === FALSE) {
    \Drupal::service('module_installer')->install(['tide_ui_restriction']);
  }

  // Update site_admin role weight and permissions.
  if ($site_admin_role = Role::load('site_admin')) {
    $site_admin_role->setWeight(-10);
    $site_admin_permissions = _tide_retrieve_config_sync('user.role.site_admin', 'permissions');
    $changed = FALSE;
    // List of permissions to ensure.
    $permissions_to_grant = [
      'access user creation page',
      'assign approver_plus role',
    ];
    foreach ($permissions_to_grant as $permission) {
      if (!in_array($permission, $site_admin_permissions)) {
        $site_admin_role->grantPermission($permission);
        $changed = TRUE;
      }
    }
    if ($changed) {
      $site_admin_role->save();
    }
  }
}

/**
 * Adds the 'Notes' field to the Sites taxonomy terms.
 */
function tide_core_update_10017() {
  $configs = [
    'field.storage.taxonomy_term.field_notes' => 'field_storage_config',
    'field.field.taxonomy_term.sites.field_notes' => 'field_config',
  ];

  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_core') . '/config/install'];

  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = $storage->getIDFromConfigName($config, $storage->getEntityType()->getConfigPrefix());

    if ($storage->load($id) === NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }

  // Update the form and view displays to show the new field.
  $form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('taxonomy_term.sites.default');

  if ($form_display) {
    $form_display->setComponent('field_notes', [
      'type' => 'string_textfield',
      'weight' => 10,
      'region' => 'content',
      'settings' => [],
      'third_party_settings' => [],
      'visible' => TRUE,
    ])->save();
  }

  $view_display = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('taxonomy_term.sites.default');

  if ($view_display) {
    $view_display->setComponent('field_notes', [
      'type' => 'string',
      'weight' => 10,
      'region' => 'content',
      'settings' => [],
      'label' => 'above',
      'third_party_settings' => [],
    ])->save();
  }
}

/**
 * Adds search_api_exclude_entity table to node.
 */
function tide_core_update_10018() {
  if (!\Drupal::moduleHandler()->moduleExists('search_api_exclude_entity')) {
    \Drupal::service('module_installer')->install(['search_api_exclude_entity']);
  }
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_core') . '/config/install'];
  $config_read = _tide_read_config('field.storage.node.field_search_index_exclude', $config_location, TRUE);
  $storage = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  if ($storage->load('node.field_search_index_exclude') == NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
  $current_permissions = _tide_retrieve_config_sync('user.role.site_admin', 'permissions');
  if (!in_array('edit search api exclude entity', $current_permissions)) {
    $role = Role::load('site_admin');
    $role->grantPermission('edit search api exclude entity');
    $role->save();
  }

}

/**
 * Remove alternative text field.
 */
function tide_core_update_10019() {
  $config_factory = \Drupal::configFactory();

  $field_names = [
    'field_top_corner_graphic',
    'field_bottom_corner_graphic',
  ];

  foreach ($field_names as $field_name) {
    $config_name = "field.field.taxonomy_term.sites.$field_name";
    $config = $config_factory->getEditable($config_name);
    $config->set('settings.alt_field', FALSE);
    $config->set('settings.alt_field_required', FALSE);
    $config->save();
  }
}

/**
 * Removes the redundant 'site_auditor' role.
 */
function tide_core_update_10020() {
  $role_id = 'site_auditor';

  /** @var \Drupal\user\RoleInterface|null $role */
  $role = Role::load($role_id);
  if ($role) {
    $role->delete();
  }

  $admin_role_id = 'site_admin';
  $permission_to_remove = 'assign site_auditor role';

  /** @var \Drupal\user\RoleInterface|null $admin_role */
  $admin_role = Role::load($admin_role_id);
  if ($admin_role && $admin_role->hasPermission($permission_to_remove)) {
    $admin_role->revokePermission($permission_to_remove);
    $admin_role->save();
  }
}

/**
 * Updates iframe settings for editorial formats and editors.
 */
function tide_core_update_10021() {
  $config_factory = \Drupal::configFactory();
  $replacement = '<iframe frameborder height scrolling src width title allowfullscreen>';
  $pattern = '/<iframe\b[^>]*>/i';
  $filter_ids = [
    'filter.format.admin_text',
    'filter.format.rich_text',
    'filter.format.summary_text',
  ];
  foreach ($filter_ids as $filter_id) {
    $filter = $config_factory->getEditable($filter_id);
    $value = $filter->get('filters.filter_html.settings.allowed_html');
    if ($value) {
      $replaced = preg_replace($pattern, $replacement, $value);
      $filter->set('filters.filter_html.settings.allowed_html', $replaced);
      $filter->save();
    }
  }

  $configs = [
    'editor.editor.admin_text',
    'editor.editor.rich_text',
    'editor.editor.summary_text',
  ];
  foreach ($configs as $config) {
    $editable_config = $config_factory->getEditable($config);
    $rows = $editable_config->get('settings.plugins.ckeditor5_sourceEditing.allowed_tags');
    $new_rows = [];
    if ($rows) {
      if (is_array($rows)) {
        foreach ($rows as $item) {
          $new_rows[] = preg_replace($pattern, $replacement, $item);
        }
      }
      $editable_config->set('settings.plugins.ckeditor5_sourceEditing.allowed_tags', $new_rows);
      $editable_config->save();
    }
  }
}

/**
 * Grants field_notes permissions to approver_plus role if not already synced.
 */
function tide_core_update_10022() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  if ($approver_plus_role = Role::load('approver_plus')) {
    // Get permissions from config sync.
    $approver_plus_permissions = _tide_retrieve_config_sync('user.role.approver_plus', 'permissions');

    $changed = FALSE;

    // Permissions to grant if not already present.
    $permissions_to_grant = [
      'create field_notes',
      'edit field_notes',
      'view field_notes',
    ];

    foreach ($permissions_to_grant as $permission) {
      if (!in_array($permission, $approver_plus_permissions)) {
        $approver_plus_role->grantPermission($permission);
        $changed = TRUE;
      }
    }

    if ($changed) {
      $approver_plus_role->save();
    }
  }
}

/**
 * Adds the 'Tags and Metadata' group to all content types.
 */
function tide_core_update_10023() {
  // Fields settings.
  $tag_fields = [
    10 => 'field_topic',
    20 => 'field_tags',
    30 => 'field_show_topic_term_and_tags',
  ];
  $metadata_fields = [
    10 => 'field_department_agency',
    20 => 'field_content_category',
    30 => 'field_node_primary_site',
    40 => 'field_node_site',
  ];
  $sites_fields = [
    30 => 'field_node_primary_site',
    40 => 'field_node_site',
  ];
  $position_anchor = [
    'group_right_column',
    'group_section_sidebar',
  ];
  // Load some services.
  $content_types = \Drupal::entityTypeManager()->getStorage('node_type')->loadMultiple();
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
  $field_manager = \Drupal::service('entity_field.manager');
  /** @var \Drupal\node\Entity\NodeType $content_type */
  foreach ($content_types as $id => $content_type) {
    // Basic group settings as a template.
    $groups = [
      'group_tags_and_metadata' => [
        'children' => [
          'group_page_tags',
          'group_page_metadata',
        ],
        'label' => 'Tags and Metadata',
        'region' => 'content',
        'parent_name' => '',
        'weight' => 5,
        'format_type' => 'tabs',
        'format_settings' => [
          'classes' => '',
          'show_empty_fields' => FALSE,
          'id' => '',
          'label_as_html' => FALSE,
          'direction' => 'horizontal',
          'width_breakpoint' => 640,
        ],
      ],
      'group_page_tags' => [
        'children' => [
          'field_topic',
          'field_tags',
          'field_show_topic_term_and_tags',
        ],
        'label' => 'Page Tags',
        'region' => 'content',
        'parent_name' => 'group_tags_and_metadata',
        'weight' => 20,
        'format_type' => 'tab',
        'format_settings' => [
          'classes' => '',
          'show_empty_fields' => FALSE,
          'id' => '',
          'label_as_html' => FALSE,
          'formatter' => 'closed',
          'description' => '',
          'required_fields' => TRUE,
        ],
      ],
      'group_page_metadata' => [
        'children' => [
          'field_department_agency',
          'field_content_category',
          'group_sites',
        ],
        'label' => 'Page Metadata',
        'region' => 'content',
        'parent_name' => 'group_tags_and_metadata',
        'weight' => 21,
        'format_type' => 'tab',
        'format_settings' => [
          'classes' => '',
          'show_empty_fields' => FALSE,
          'id' => '',
          'label_as_html' => FALSE,
          'formatter' => 'closed',
          'description' => '',
          'required_fields' => TRUE,
        ],
      ],
      'group_sites' => [
        'children' => [
          'field_node_primary_site',
          'field_node_site',
        ],
        'label' => 'Sites',
        'region' => 'content',
        'parent_name' => 'group_page_metadata',
        'weight' => 30,
        'format_type' => 'details',
        'format_settings' => [
          'classes' => '',
          'show_empty_fields' => FALSE,
          'id' => '',
          'label_as_html' => FALSE,
          'open' => TRUE,
          'description' => '',
          'required_fields' => TRUE,
        ],
      ],
    ];
    // Get the field and widget definitions.
    $fields = $field_manager->getFieldDefinitions('node', $id);
    $count = 0;
    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
    $entity_form_display = Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.' . $id . '.default');
    $field_group = $entity_form_display->getThirdPartySettings('field_group');
    foreach ($tag_fields as $index => $tag_field) {
      if (!isset($fields[$tag_field])) {
        // Remove non-existing fields from the template.
        $key = array_search($tag_field, $groups['group_page_tags']['children']);
        if ($key !== FALSE) {
          unset($groups['group_page_tags']['children'][$key]);
          $groups['group_page_tags']['children'] = array_values($groups['group_page_tags']['children']);
        }
        $count++;
      }
      else {
        if ($tag_field === 'field_tags') {
          // Update field_tags widget to `entity_reference_autocomplete_tags`.
          $tag_field_definition = $entity_form_display->getComponent($tag_field);
          $tag_field_definition['type'] = 'entity_reference_autocomplete_tags';
          $entity_form_display->setComponent($tag_field, $tag_field_definition);
        }
        // Update weight for tag group fields.
        $field_form_definition = $entity_form_display->getComponent($tag_field);
        $field_form_definition['weight'] = $index;
        $entity_form_display->setComponent($tag_field, $field_form_definition);
      }
    }
    if ($count === 3) {
      // If all fields are removed, remove group_page_tags from its parent.
      unset($groups['group_page_tags']);
      $key = array_search('group_page_tags', $groups['group_tags_and_metadata']['children']);
      if ($key !== FALSE) {
        unset($groups['group_tags_and_metadata']['children'][$key]);
        $groups['group_tags_and_metadata']['children'] = array_values($groups['group_tags_and_metadata']['children']);
      }
    }
    // Handle metadata_fields.
    foreach ($metadata_fields as $index => $metadata_field) {
      if (!isset($fields[$metadata_field])) {
        $key = array_search($metadata_field, $groups['group_page_metadata']['children']);
        if ($key !== FALSE) {
          unset($groups['group_page_metadata']['children'][$key]);
          $groups['group_page_metadata']['children'] = array_values($groups['group_page_metadata']['children']);
        }
      }
      else {
        $field_form_definition = $entity_form_display->getComponent($metadata_field);
        $field_form_definition['weight'] = $index;
        $entity_form_display->setComponent($metadata_field, $field_form_definition);
      }
    }
    // Handle sites_fields.
    foreach ($sites_fields as $index => $sites_field) {
      $field_form_definition = $entity_form_display->getComponent($sites_field);
      $field_form_definition['weight'] = $index;
      $entity_form_display->setComponent($metadata_field, $field_form_definition);
    }

    $position_anchor_count = 0;
    // Now, it is the time to update entity_form_display.
    if (!isset($field_group['group_tags_and_metadata'])) {
      $field_group['group_tags_and_metadata'] = $groups['group_tags_and_metadata'];
      foreach ($position_anchor as $anchor) {
        if (!empty($field_group[$anchor])) {
          $field_group['group_tags_and_metadata']['weight'] = $field_group[$anchor]['weight'] + 1;
        }
        else {
          $position_anchor_count++;
        }
      }
      if ($position_anchor_count === 2) {
        if ($field_show_content_rating_settings = $entity_form_display->getComponent('field_show_content_rating')) {
          $field_group['group_tags_and_metadata']['weight'] = $field_show_content_rating_settings['weight'];
        }
      }

      $entity_form_display->setThirdPartySetting('field_group', 'group_tags_and_metadata', $field_group['group_tags_and_metadata']);
      if (isset($groups['group_page_tags'])) {
        $field_group['group_page_tags'] = $groups['group_page_tags'];
        $entity_form_display->setThirdPartySetting('field_group', 'group_page_tags', $field_group['group_page_tags']);
      }
      $field_group['group_page_metadata'] = $groups['group_page_metadata'];
      $entity_form_display->setThirdPartySetting('field_group', 'group_page_metadata', $field_group['group_page_metadata']);
      $field_group['group_sites'] = $groups['group_sites'];
      $entity_form_display->setThirdPartySetting('field_group', 'group_sites', $field_group['group_sites']);
      // Update field_show_content_rating to lower position.
      if ($field_show_content_rating_settings = $entity_form_display->getComponent('field_show_content_rating')) {
        $field_show_content_rating_settings['weight'] += 1;
        $entity_form_display->setComponent('field_show_content_rating', $field_show_content_rating_settings);
      }
      $entity_form_display->save();
    }
  }

}

/**
 * Revoke `delete` from all content types on the 3 roles.
 */
function tide_core_update_10024() {
  $content_types = \Drupal::entityTypeManager()->getStorage('node_type')->loadMultiple();
  $roles = [
    'editor',
    'approver',
    'approver_plus',
  ];
  foreach ($roles as $role_id) {
    $role = Role::load($role_id);
    foreach ($content_types as $type => $content_type_entity) {
      $role->revokePermission("delete own {$type} content")->revokePermission("delete any {$type} content");
      $role->save();
    }
  }
}

/**
 * Fixes mismatched entity and/or field definitions" error.
 */
function tide_core_update_10024() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type_manager->clearCachedDefinitions();
  $entity_type_ids = [];
  $change_summary = \Drupal::service('entity.definition_update_manager')->getChangeSummary();
  if (!empty($change_summary)) {
    foreach ($change_summary as $entity_type_id => $change_list) {
      $entity_type = $entity_type_manager->getDefinition($entity_type_id);
      \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);
      $entity_type_ids[] = $entity_type_id;
    }
    Drush::output()->writeln('Installed/Updated the entity type(s): ' . implode(', ', $entity_type_ids));
  }
}
